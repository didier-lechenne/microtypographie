/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Microtypographie
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/settings/settings.ts
var DEFAULT_SETTINGS = {
  openDoubleQuote: "\xAB\u202F",
  // Guillemet français ouvrant avec espace fine insécable
  closeDoubleQuote: "\u202F\xBB",
  // Guillemet français fermant avec espace fine insécable
  openSingleQuote: "\u2019",
  // Apostrophe typographique
  closeSingleQuote: "\u2018",
  // Apostrophe typographique
  frenchRulesEnabled: true,
  dashesEnabled: true,
  skipEnDash: false,
  ellipsisEnabled: true,
  guillemetsEnabled: false,
  highlightEnabled: false,
  highlightButton: true,
  tabTitleBarButton: true
  // Activé par défaut
};

// src/settings/settingsTab.ts
var import_obsidian = require("obsidian");
var MicrotypographieSettingTab = class extends import_obsidian.PluginSettingTab {
  // Pour stocker la référence au container du champ de texte
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: "Microtypographie" });
    this.createBasicSettings(containerEl);
    this.createHighlightSettings(containerEl);
  }
  /**
   * Crée le bloc d'information
   * @param containerEl Conteneur parent
   */
  createInfoBlock(containerEl) {
    const infoContainer = containerEl.createEl("div", {
      cls: "microtypographie-info-container"
    });
    const infoContent = infoContainer.createEl("div", {
      cls: "microtypographie-info-content"
    });
    infoContent.createEl("p", {
      text: "Ce plugin applique automatiquement une partie des r\xE8gles typographiques fran\xE7aises pendant la saisie."
    });
    const rulesList = infoContent.createEl("ul");
    rulesList.createEl("li", {
      text: "Espaces ins\xE9cables avant les ponctuations doubles (! ? ; \xBB)"
    });
    rulesList.createEl("li", { text: "Espaces fines ins\xE9cables avant (:)" });
    rulesList.createEl("li", {
      text: "Espaces fines ins\xE9cables dans les guillemets fran\xE7ais (\xAB\u202Fphrase\u202F\xBB)"
    });
    rulesList.createEl("li", { text: "Apostrophe typographique (\u2019)" });
    rulesList.createEl("li", {
      text: "Conversion de (--) en tiret cadratin (\u2014)"
    });
    infoContent.createEl("p", {
      text: "Utilisez Alt+F pour appliquer toutes les r\xE8gles sur un texte existant."
    });
    const transformationsList = infoContent.createEl("ul");
    transformationsList.createEl("li", {
      text: 'Conversion de (" ") en guillemets fran\xE7ais (\xAB \xBB)'
    });
    transformationsList.createEl("li", {
      text: "Conversion de ' en apostrophe typographique (\u2019)"
    });
    transformationsList.createEl("li", {
      text: "Espace fine ins\xE9cable avant : (! ? ; \xBB \u203A)"
    });
    transformationsList.createEl("li", {
      text: "Espace ins\xE9cable avant : (:)"
    });
    transformationsList.createEl("li", {
      text: "Espace fine ins\xE9cable apr\xE8s : (\xAB \u2039)"
    });
    transformationsList.createEl("li", {
      text: "Espace ins\xE9cable apr\xE8s les mots d'une lettre (a, y, \xE0 \u2026)"
    });
    transformationsList.createEl("li", {
      text: "Espace ins\xE9cable dans les noms compos\xE9s (Jean\xA0Dupont)"
    });
    transformationsList.createEl("li", {
      text: "Espace ins\xE9cable avant les initiales (M.\xA0Dupont)"
    });
    transformationsList.createEl("li", {
      text: "Espace ins\xE9cable avant (si\xE8cle) (XXe\xA0si\xE8cle)"
    });
    transformationsList.createEl("li", {
      text: "Conversion de (oe/OE) en ligatures (\u0153/\u0152)"
    });
    transformationsList.createEl("li", {
      text: "Conversion de (--) en tiret cadratin (\u2014)"
    });
    transformationsList.createEl("li", {
      text: "Conversion de (...) en points de suspension (\u2026)"
    });
    infoContent.createEl("p", {
      text: "Info pour ins\xE9rer une espace ins\xE9cable avec Obsidian :"
    });
    const shortcutsList = infoContent.createEl("ul");
    shortcutsList.createEl("li", { text: "Windows : Alt+255" });
    shortcutsList.createEl("li", { text: "macOS : Alt+Espace" });
    this.addInfoBlockStyles();
  }
  /**
   * Ajoute les styles CSS pour le bloc d'information
   */
  addInfoBlockStyles() {
    const styleElement = document.createElement("style");
    styleElement.textContent = `
        .microtypographie-info-container {
            background-color: rgba(var(--interactive-accent-rgb), 0.1);
            border-left: 4px solid var(--interactive-accent);
            margin: 1em 0;
            padding: 1em;
            border-radius: 4px;
        }
        
        .microtypographie-info-container h2 {
            margin-top: 0;
            font-size: 1.2em;
            color: var(--interactive-accent);
        }
        
        .microtypographie-info-content p {
            margin: 0.5em 0;
        }
    `;
    document.head.appendChild(styleElement);
  }
  /**
   * Crée les paramètres de base
   * @param containerEl Conteneur parent
   */
  createBasicSettings(containerEl) {
    const desEl = containerEl.createEl("p", {
      text: "Caract\xE8res typographiques personnalisables"
    });
    desEl.style.fontWeight = "bold";
    new import_obsidian.Setting(containerEl).setName("Guillemet double ouvrant").addText(
      (text) => text.setValue(this.plugin.settings.openDoubleQuote).onChange(async (value) => {
        this.plugin.settings.openDoubleQuote = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Guillemet double fermant").addText(
      (text) => text.setValue(this.plugin.settings.closeDoubleQuote).onChange(async (value) => {
        this.plugin.settings.closeDoubleQuote = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Guillemet simple ouvrant").addText(
      (text) => text.setValue(this.plugin.settings.openSingleQuote).onChange(async (value) => {
        this.plugin.settings.openSingleQuote = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Guillemet simple fermant").addText(
      (text) => text.setValue(this.plugin.settings.closeSingleQuote).onChange(async (value) => {
        this.plugin.settings.closeSingleQuote = value;
        await this.plugin.saveSettings();
      })
    );
    const transformTitle = containerEl.createEl("p", {
      text: "Options"
    });
    transformTitle.style.fontWeight = "bold";
    transformTitle.style.marginTop = "1.5em";
    new import_obsidian.Setting(containerEl).setName("Tirets").setDesc(
      "-- devient tiret demi-cadratin (\u2013), \u2013- devient tiret cadratin (\u2014), \u2014- devient trois tirets (---)"
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.dashesEnabled).onChange(async (value) => {
        this.plugin.settings.dashesEnabled = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Ignorer le tiret demi-cadratin").setDesc(
      "Quand activ\xE9, -- est directement converti en tiret cadratin (\u2014) plut\xF4t qu'en demi-cadratin (\u2013)"
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.skipEnDash).onChange(async (value) => {
        this.plugin.settings.skipEnDash = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Points de suspension").setDesc(
      "Trois points (...) seront convertis en points de suspension (\u2026)"
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.ellipsisEnabled).onChange(async (value) => {
        this.plugin.settings.ellipsisEnabled = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Guillemets").setDesc(
      "Les chevrons << et >> seront convertis en guillemets fran\xE7ais \xAB et \xBB"
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.guillemetsEnabled).onChange(async (value) => {
        this.plugin.settings.guillemetsEnabled = value;
        await this.plugin.saveSettings();
      })
    );
    const frenchRulesContainer = containerEl.createEl("div");
    frenchRulesContainer.style.marginTop = "3em";
    const frenchRulesSetting = new import_obsidian.Setting(frenchRulesContainer).setName("R\xE8gles typographiques fran\xE7aises").setDesc(
      ""
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.frenchRulesEnabled).onChange(async (value) => {
        this.plugin.settings.frenchRulesEnabled = value;
        frenchRulesDescContainer.style.display = value ? "block" : "none";
        await this.plugin.saveSettings();
      })
    );
    const nameEl = frenchRulesSetting.nameEl;
    if (nameEl) {
      nameEl.style.fontWeight = "bold";
    }
    const frenchRulesDescContainer = frenchRulesContainer.createEl("div", {
      cls: "french-rules-description"
    });
    frenchRulesDescContainer.style.display = this.plugin.settings.frenchRulesEnabled ? "block" : "none";
    frenchRulesDescContainer.style.paddingLeft = "24px";
    frenchRulesDescContainer.style.marginTop = "8px";
    const frenchRulesDesc = frenchRulesDescContainer.createEl("div", {
      cls: "setting-item-description"
    });
    frenchRulesDesc.createEl("p", {
      text: "Ces r\xE8gles incluent :"
    });
    const rulesList = frenchRulesDesc.createEl("ul");
    rulesList.style.marginLeft = "20px";
    rulesList.style.marginBottom = "15px";
    rulesList.createEl("li", {
      text: 'Conversion de (" ") en guillemets fran\xE7ais (\xAB \xBB)'
    });
    rulesList.createEl("li", {
      text: "Espace fine ins\xE9cable avant les ponctuations doubles (! ? ; \xBB)"
    });
    rulesList.createEl("li", {
      text: "Espace ins\xE9cable avant les deux-points (:)"
    });
    rulesList.createEl("li", {
      text: "Espace ins\xE9cable apr\xE8s les mots d'une lettre (a, y, \xE0...)"
    });
    rulesList.createEl("li", {
      text: "Espace ins\xE9cable dans les noms compos\xE9s (Jean Dupont)"
    });
    rulesList.createEl("li", {
      text: "Espace ins\xE9cable avant les initiales (M. Dupont)"
    });
    rulesList.createEl("li", {
      text: 'Espace ins\xE9cable avant "si\xE8cle" (XXe si\xE8cle)'
    });
    rulesList.createEl("li", {
      text: 'Conversion des ligatures "oe/OE" en "\u0153/\u0152"'
    });
    rulesList.createEl("li", {
      text: "Exposants pour les ordinaux (1er, XIIe)"
    });
    rulesList.createEl("li", {
      text: "Conversion de (...) en points de suspension (\u2026)"
    });
    const noteEl = frenchRulesDescContainer.createEl("div", {
      cls: "setting-item-description"
    });
    noteEl.createEl("p", {
      text: "Sources :"
    });
    const infoList = noteEl.createEl("ul");
    const infoItem = infoList.createEl("li");
    infoItem.createEl("a", {
      href: "https://gitlab.com/JulieBlanc/typesetting-tools/-/blob/master/regex-typo.js?ref_type=heads",
      text: "typesetting-tools (Julie Blanc)"
    });
    const infoItem2 = infoList.createEl("li");
    infoItem2.createEl("a", {
      href: "https://typomanie.fr/tag/micro-typographie/",
      text: "Le Petit manuel de composition typographique. (Muriel Paris)"
    });
  }
  /**
   * Crée les paramètres de mise en évidence
   * @param containerEl Conteneur parent
   */
  createHighlightSettings(containerEl) {
    const desEl = containerEl.createEl("p", {
      text: "Affichage des caract\xE8res invisibles"
    });
    desEl.style.fontWeight = "bold";
    desEl.style.marginTop = "3em";
    new import_obsidian.Setting(containerEl).setName("Activer l'affichage des caract\xE8res invisibles").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.highlightEnabled).onChange(async (value) => {
        this.plugin.settings.highlightEnabled = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Bouton dans la barre d'\xE9tat").setDesc(
      "Afficher un bouton d'activation/d\xE9sactivation"
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.highlightButton).onChange(async (value) => {
        this.plugin.settings.highlightButton = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Bouton dans la barre de titre").setDesc(
      "Afficher un bouton d'activation/d\xE9sactivation dans la barre de titre des onglets"
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.tabTitleBarButton).onChange(async (value) => {
        this.plugin.settings.tabTitleBarButton = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/ui/decorations.ts
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
function createDecorations(settings) {
  const nonBreakingSpaceDecoration = import_view.Decoration.mark({
    class: "nonBreakingSpace"
  });
  const thinSpaceDecoration = import_view.Decoration.mark({
    class: "thinSpace"
  });
  const emDashDecoration = import_view.Decoration.mark({
    class: "em-dash"
  });
  const regularSpaceDecoration = import_view.Decoration.mark({
    class: "regularSpace"
  });
  return import_view.ViewPlugin.fromClass(class {
    constructor(view) {
      this.decorations = this.buildDecorations(view);
    }
    update(update) {
      if (update.docChanged || update.viewportChanged) {
        this.decorations = this.buildDecorations(update.view);
      }
    }
    buildDecorations(view) {
      const builder = new import_state.RangeSetBuilder();
      if (settings.highlightEnabled) {
        for (let { from, to } of view.visibleRanges) {
          let text = view.state.doc.sliceString(from, to);
          let documentText = view.state.doc.toString();
          let startPos = from;
          let inFrontmatter = false;
          let inCodeBlock = false;
          let lineStart = true;
          for (let i = 0; i < text.length; i++) {
            const char = text[i];
            const pos = startPos + i;
            const currentPos = view.state.doc.lineAt(pos);
            const lineNumber = currentPos.number - 1;
            if (lineStart && text.substr(i, 3) === "---") {
              inFrontmatter = !inFrontmatter;
              i += 2;
              lineStart = false;
              continue;
            }
            if (lineStart && text.substr(i, 3) === "```") {
              inCodeBlock = !inCodeBlock;
              i += 2;
              lineStart = false;
              continue;
            }
            if (char === "\n") {
              lineStart = true;
            } else if (lineStart && char !== " " && char !== "	") {
              lineStart = false;
            }
            const isInSpecialBlock2 = inFrontmatter || inCodeBlock;
            if (!isInSpecialBlock2) {
              if (char === "\xA0") {
                builder.add(pos, pos + 1, nonBreakingSpaceDecoration);
              }
              if (char === "\u202F") {
                builder.add(pos, pos + 1, thinSpaceDecoration);
              }
              if (char === "\u2014") {
                builder.add(pos, pos + 1, emDashDecoration);
              }
              if (char === " ") {
                builder.add(pos, pos + 1, regularSpaceDecoration);
              }
            }
          }
        }
      }
      return builder.finish();
    }
  }, {
    decorations: (v) => v.decorations
  });
}

// src/ui/statusBar.ts
var import_obsidian2 = require("obsidian");
function createStatusBarButton(plugin, isEnabled, toggleCallback) {
  const statusBarItemEl = plugin.addStatusBarItem();
  statusBarItemEl.id = "highlight-status-bar-button";
  statusBarItemEl.addClass("mod-clickable");
  (0, import_obsidian2.setIcon)(statusBarItemEl, "pilcrow");
  statusBarItemEl.setAttribute("aria-label", "Afficher/Masquer les caract\xE8res invisibles");
  statusBarItemEl.setAttribute("data-tooltip-position", "top");
  updateStatusBarButton(statusBarItemEl, isEnabled);
  statusBarItemEl.onClickEvent(() => {
    toggleCallback();
  });
  return statusBarItemEl;
}
function createTabTitleBarButton(plugin, isEnabled, toggleCallback) {
  const buttonEl = document.createElement("button");
  buttonEl.id = "highlight-tab-title-button";
  buttonEl.className = "clickable-icon view-action";
  buttonEl.setAttribute("aria-label", "Afficher/Masquer les caract\xE8res invisibles");
  (0, import_obsidian2.setIcon)(buttonEl, "pilcrow");
  updateTabTitleBarButton(buttonEl, isEnabled);
  buttonEl.addEventListener("click", (event) => {
    event.preventDefault();
    toggleCallback();
  });
  const titleBarEl = document.querySelector(".view-header-title-container");
  if (titleBarEl) {
    const actionsEl = titleBarEl.nextElementSibling;
    if (actionsEl && actionsEl.classList.contains("view-actions")) {
      actionsEl.prepend(buttonEl);
    }
  }
  return buttonEl;
}
function updateStatusBarButton(buttonEl, isEnabled) {
  if (!buttonEl)
    return;
  if (isEnabled) {
    buttonEl.addClass("highlight-enabled");
  } else {
    buttonEl.removeClass("highlight-enabled");
  }
}
function updateTabTitleBarButton(buttonEl, isEnabled) {
  if (!buttonEl)
    return;
  if (isEnabled) {
    buttonEl.addClass("is-active");
  } else {
    buttonEl.removeClass("is-active");
  }
}
function removeTabTitleBarButton(buttonEl) {
  if (buttonEl) {
    buttonEl.remove();
  }
}

// src/core/blockAnalyzer.ts
function analyzeDocumentStructure(documentText, startLine, endLine) {
  const lines = documentText.split("\n");
  const lineTypes = new Array(endLine - startLine + 1).fill("normal");
  let inFrontmatter = false;
  let inCodeBlock = false;
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    if (line.trim() === "---") {
      inFrontmatter = !inFrontmatter;
    } else if (line.trim().startsWith("```")) {
      inCodeBlock = !inCodeBlock;
    }
    if (i >= startLine && i <= endLine) {
      const relativeIndex = i - startLine;
      if (line.trim() === "---" || line.trim().startsWith("```")) {
        lineTypes[relativeIndex] = "delimiter";
      } else if (inFrontmatter) {
        lineTypes[relativeIndex] = "frontmatter";
      } else if (inCodeBlock) {
        lineTypes[relativeIndex] = "code";
      }
    }
    if (i > endLine)
      break;
  }
  return { lineTypes };
}
function isLineInSpecialBlock(documentText, lineNumber) {
  const lines = documentText.split("\n");
  let inFrontmatter = false;
  let inCodeBlock = false;
  for (let i = 0; i <= lineNumber; i++) {
    const line = lines[i];
    if (line.trim() === "---") {
      inFrontmatter = !inFrontmatter;
    } else if (line.trim().startsWith("```")) {
      inCodeBlock = !inCodeBlock;
    }
    if (i === lineNumber) {
      return inFrontmatter || inCodeBlock;
    }
  }
  return false;
}

// src/utils/helpers.ts
function isInSpecialBlock(editor) {
  const cursor = editor.getCursor();
  const text = editor.getValue();
  return isLineInSpecialBlock(text, cursor.line);
}
function isInPreservedMarkdown(editor) {
  const cursor = editor.getCursor();
  const line = editor.getLine(cursor.line);
  const codeInlinePattern = /`[^`]*`/g;
  const codeInlineMatches = [...line.matchAll(codeInlinePattern)];
  for (const match of codeInlineMatches) {
    const start = match.index || 0;
    const end = start + match[0].length;
    if (cursor.ch >= start && cursor.ch <= end) {
      return true;
    }
  }
  const obsidianLinkPattern = /\[\[[^\]]*\]\]/g;
  const obsidianLinkMatches = [...line.matchAll(obsidianLinkPattern)];
  for (const match of obsidianLinkMatches) {
    const start = match.index || 0;
    const end = start + match[0].length;
    if (cursor.ch >= start && cursor.ch <= end) {
      return true;
    }
  }
  const mathInlinePattern = /\$[^$]*\$/g;
  const mathInlineMatches = [...line.matchAll(mathInlinePattern)];
  for (const match of mathInlineMatches) {
    const start = match.index || 0;
    const end = start + match[0].length;
    if (cursor.ch >= start && cursor.ch <= end) {
      return true;
    }
  }
  if (line.includes("$$")) {
    const matches = [...line.matchAll(/\$\$/g)];
    for (const match of matches) {
      const start = match.index || 0;
      const end = start + 2;
      if (cursor.ch >= start && cursor.ch <= end) {
        return true;
      }
    }
  }
  const calloutPattern = /^>\s+\[!.*\]/;
  if (calloutPattern.test(line) && cursor.ch <= line.length) {
    return true;
  }
  const urlPattern = /(https?:\/\/|www\.)[^\s]+/g;
  const urlMatches = [...line.matchAll(urlPattern)];
  for (const match of urlMatches) {
    const start = match.index || 0;
    const end = start + match[0].length;
    if (cursor.ch >= start && cursor.ch <= end) {
      return true;
    }
  }
  const imagePattern = /!\[.*?\]\(.*?\)/g;
  const imageMatches = [...line.matchAll(imagePattern)];
  for (const match of imageMatches) {
    const start = match.index || 0;
    const end = start + match[0].length;
    if (cursor.ch >= start && cursor.ch <= end) {
      return true;
    }
  }
  const linkPattern = /\[.*?\]\(.*?\)/g;
  const linkMatches = [...line.matchAll(linkPattern)];
  for (const match of linkMatches) {
    const start = match.index || 0;
    const end = start + match[0].length;
    if (cursor.ch >= start && cursor.ch <= end) {
      return true;
    }
  }
  const htmlTagPattern = /<[^>]*>/g;
  const htmlMatches = [...line.matchAll(htmlTagPattern)];
  for (const match of htmlMatches) {
    const start = match.index || 0;
    const end = start + match[0].length;
    if (cursor.ch >= start && cursor.ch <= end) {
      return true;
    }
  }
  const taskPattern = /^\s*- \[[ x]\]/;
  if (taskPattern.test(line) && cursor.ch <= line.indexOf("]") + 1) {
    return true;
  }
  return false;
}
async function injectCSSFromFile(plugin, fileName) {
  try {
    const pluginDir = plugin.manifest.dir;
    const filePath = `${pluginDir}/${fileName}`;
    const cssContent = await plugin.app.vault.adapter.read(filePath);
    const styleEl = document.createElement("style");
    styleEl.textContent = cssContent;
    document.head.appendChild(styleEl);
  } catch (error) {
    console.error("\xC9chec de chargement du fichier CSS:", error);
  }
}

// src/modules/liveTypography.ts
var LiveTypographyModule = class {
  constructor(settings) {
    this.settings = settings;
  }
  /**
   * Initialise le module avec les paramètres actuels
   * @param settings Paramètres mis à jour
   */
  updateSettings(settings) {
    this.settings = settings;
  }
  /**
   * Gère les événements clavier pour appliquer les règles typographiques en temps réel
   * @param event Événement clavier
   * @param editor Éditeur Obsidian
   * @returns true si l'événement a été géré, false sinon
   */
  handleKeyEvent(event, editor) {
    if (isInSpecialBlock(editor) || isInPreservedMarkdown(editor)) {
      return false;
    }
    const cursor = editor.getCursor();
    let handled = false;
    if (event.key === "'") {
      event.preventDefault();
      const selection = editor.getSelection();
      if (selection.length > 0) {
        editor.replaceSelection(this.settings.openSingleQuote);
      } else {
        editor.replaceRange(this.settings.openSingleQuote, cursor);
        editor.setCursor({ line: cursor.line, ch: cursor.ch + this.settings.openSingleQuote.length });
      }
      handled = true;
    } else if (["!", "?", ";"].includes(event.key) && this.settings.frenchRulesEnabled) {
      event.preventDefault();
      const charBefore = editor.getRange(
        { line: cursor.line, ch: cursor.ch - 1 },
        cursor
      );
      if (charBefore === " ") {
        editor.replaceRange(
          "\u202F" + event.key,
          { line: cursor.line, ch: cursor.ch - 1 },
          cursor
        );
      } else {
        editor.replaceRange(event.key, cursor);
      }
      editor.setCursor({ line: cursor.line, ch: cursor.ch + 1 });
      handled = true;
    } else if (event.key === ":" && this.settings.frenchRulesEnabled) {
      event.preventDefault();
      const charBefore = editor.getRange(
        { line: cursor.line, ch: cursor.ch - 1 },
        cursor
      );
      if (charBefore === " ") {
        editor.replaceRange(
          "\xA0" + event.key,
          { line: cursor.line, ch: cursor.ch - 1 },
          cursor
        );
      } else {
        editor.replaceRange(event.key, cursor);
      }
      editor.setCursor({ line: cursor.line, ch: cursor.ch + 1 });
      handled = true;
    } else if (event.key === '"') {
      event.preventDefault();
      const quoteSet = this.settings.openDoubleQuote + this.settings.closeDoubleQuote;
      editor.replaceRange(quoteSet, cursor);
      editor.setCursor({
        line: cursor.line,
        ch: cursor.ch + this.settings.openDoubleQuote.length
      });
      handled = true;
    } else if (event.key === "." && this.settings.ellipsisEnabled) {
      const textBefore = editor.getRange(
        { line: cursor.line, ch: cursor.ch - 2 },
        cursor
      );
      if (textBefore === "..") {
        event.preventDefault();
        editor.replaceRange(
          "\u2026",
          { line: cursor.line, ch: cursor.ch - 2 },
          cursor
        );
        editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
        handled = true;
      }
    } else if (event.key === "-" && this.settings.dashesEnabled) {
      const textBefore = editor.getRange(
        { line: cursor.line, ch: cursor.ch - 1 },
        cursor
      );
      if (this.settings.skipEnDash) {
        if (textBefore === "-") {
          event.preventDefault();
          editor.replaceRange(
            "\u2014",
            { line: cursor.line, ch: cursor.ch - 1 },
            cursor
          );
          editor.setCursor({ line: cursor.line, ch: cursor.ch });
          handled = true;
        }
      } else {
        if (textBefore === "-") {
          event.preventDefault();
          editor.replaceRange(
            "\u2013",
            { line: cursor.line, ch: cursor.ch - 1 },
            cursor
          );
          editor.setCursor({ line: cursor.line, ch: cursor.ch });
          handled = true;
        } else if (textBefore === "\u2013") {
          event.preventDefault();
          editor.replaceRange(
            "\u2014",
            { line: cursor.line, ch: cursor.ch - 1 },
            cursor
          );
          editor.setCursor({ line: cursor.line, ch: cursor.ch });
          handled = true;
        } else if (textBefore === "\u2014") {
          event.preventDefault();
          editor.replaceRange(
            "---",
            { line: cursor.line, ch: cursor.ch - 1 },
            cursor
          );
          editor.setCursor({ line: cursor.line, ch: cursor.ch + 2 });
          handled = true;
        }
      }
    } else if (event.key === ">" && this.settings.guillemetsEnabled) {
      const textBefore = editor.getRange(
        { line: cursor.line, ch: cursor.ch - 1 },
        cursor
      );
      if (textBefore === ">") {
        event.preventDefault();
        editor.replaceRange(
          "\u202F\xBB",
          { line: cursor.line, ch: cursor.ch - 1 },
          cursor
        );
        editor.setCursor({ line: cursor.line, ch: cursor.ch });
        handled = true;
      }
    } else if (event.key === "<" && this.settings.guillemetsEnabled) {
      const textBefore = editor.getRange(
        { line: cursor.line, ch: cursor.ch - 1 },
        cursor
      );
      if (textBefore === "<") {
        event.preventDefault();
        editor.replaceRange(
          "\xAB\u202F",
          { line: cursor.line, ch: cursor.ch - 1 },
          cursor
        );
        editor.setCursor({ line: cursor.line, ch: cursor.ch });
        handled = true;
      }
    }
    return handled;
  }
};

// src/core/typographyRules.ts
var FRENCH_RULES = [
  // Règles orthographiques
  { reg: /(X|I|V)ème/g, repl: "$1e" },
  { reg: /(X|I|V)eme/g, repl: "$1e" },
  { reg: /(X|I|V)éme/g, repl: "$1e" },
  { reg: /oe/g, repl: "\u0153" },
  { reg: /OE/g, repl: "\u0152" },
  { reg: /Oe/g, repl: "\u0152" },
  { reg: /ae/g, repl: "\xE6" },
  { reg: /AE/g, repl: "\xC6" },
  { reg: /Ae/g, repl: "\xC6" },
  // french open quotes
  { reg: /\"([A-Za-zÀ-ÖØ-öø-ÿœŒ])/g, repl: "\xAB\u202F$1" },
  // french close quotes - version améliorée
  { reg: /([^\s][!?;:.,]?)\s*\"/g, repl: "$1\u202F\xBB" },
  // real apostrophe
  { reg: /\'/g, repl: "\u2019" },
  // real suspension points
  { reg: /\.{3,}/g, repl: "\u2026" },
  // delete all spaces before punctuation !?;:»›”)].,
  { reg: /\s+([!?;:»›")\]\.\,])/g, repl: "$1" },
  // add narrow no break space before !?;»›
  { reg: /([!?;»›])/g, repl: "\u202F$1" },
  // add no break space before : (correctly handling existing spaces, but avoiding URLs)
  { reg: /\s+(:)(?!\/\/)/g, repl: "\xA0$1" },
  { reg: /([^\s:\/])(:)(?!\/\/)/g, repl: "$1\xA0$2" },
  // delete all spaces after «‹“[(
  { reg: /([«‹"\[(])\s+/g, repl: "$1" },
  // add narrow no break space after «‹
  { reg: /([«‹])/g, repl: "$1\u202F" },
  // no break space after one letter words
  { reg: /\s+([a-zà])\s+/gi, repl: " $1\xA0" },
  // no break space into names
  {
    reg: /([A-ZÀ-ÖØŒ])([A-Za-zÀ-ÖØ-öø-ÿœŒ]+)\s+([A-ZÀ-ÖØŒ])([A-Za-zÀ-ÖØ-öø-ÿœŒ]+)/g,
    repl: "$1$2\xA0$3$4"
  },
  // no break space after abbreviation with period
  {
    reg: /([A-ZÀ-ÖØŒ]\.)\s+([A-ZÀ-ÖØŒ][A-Za-zÀ-ÖØ-öø-ÿœŒ]+)/g,
    repl: "$1\xA0$2"
  },
  // no break space before 'siècles'
  { reg: /(X|I|V)(er|e)\s+siècle/g, repl: "$1$2\xA0si\xE8cle" },
  // add sub
  { reg: /(X|I|V)(er|e)/g, repl: "$1<sup>$2</sup>" },
  // Transformer les guillemets simples à l'intérieur de guillemets doubles en guillemets anglais
  { reg: /(«\u202F[^»]*)'([^’]*)'([^»]*\u202F»)/g, repl: '$1"$2"$3' },
  // ajouter espace après guillemet fermant suivi d'un mot
  { reg: /(»)([A-Za-zÀ-ÖØ-öø-ÿœŒ0-9])/g, repl: "$1 $2" },
  // Transformer les guillemets simples à l'intérieur de guillemets doubles en guillemets anglais
  { reg: /(«\u202F[^»]*)«\u202F([^»]*)\u202F»([^»]*\u202F»)/g, repl: "$1\u201C$2\u201D$3" }
];
var BASE_RULES = [
  // Règles minimales pour les espaces qui ne sont pas spécifiques au français
];
function compileRules(settings) {
  let frenchRules = [];
  frenchRules.push(
    {
      reg: new RegExp(`"([A-Za-z\xC0-\xD6\xD8-\xF6\xF8-\xFF\u0153\u0152])`, "g"),
      repl: settings.openDoubleQuote + "$1"
    },
    {
      reg: new RegExp(`([A-Za-z\xC0-\xD6\xD8-\xF6\xF8-\xFF\u0153\u0152][!?;:.,]?)"`, "g"),
      repl: "$1" + settings.closeDoubleQuote
    },
    // Apostrophe typographique personnalisable
    { reg: /\'/g, repl: settings.openSingleQuote }
  );
  if (settings.ellipsisEnabled) {
    frenchRules.push({ reg: /\.{3,}/g, repl: "\u2026" });
  }
  if (settings.guillemetsEnabled) {
    frenchRules.push({ reg: /<</g, repl: "\xAB\u202F" }, { reg: />>/g, repl: "\u202F\xBB" });
  }
  if (settings.frenchRulesEnabled) {
    frenchRules = [...frenchRules, ...FRENCH_RULES];
    frenchRules.push({
      reg: /(«\u202F[^»]*)«\u202F([^»]*)\u202F»([^»]*\u202F»)/g,
      repl: "$1\u201C$2\u201D$3"
    });
  } else {
    frenchRules = [...frenchRules, ...BASE_RULES];
  }
  const dashRules = [];
  if (settings.dashesEnabled) {
    if (settings.skipEnDash) {
      dashRules.push({ reg: /--/g, repl: "\u2014" });
    } else {
      dashRules.push(
        { reg: /--/g, repl: "\u2013" },
        // -- devient –
        { reg: /–-/g, repl: "\u2014" },
        // –- devient —
        { reg: /—-/g, repl: "---" }
        // —- devient ---
      );
    }
  }
  return { frenchRules, dashRules };
}
function applyRules(text, rules) {
  let result = text;
  for (const rule of rules) {
    result = result.replace(rule.reg, rule.repl);
  }
  return result;
}

// src/core/textProcessor.ts
function applyAllRules(text, rules) {
  let result = text;
  const preservedElements = [];
  const patterns = [
    /\[\[.*?\]\]/g,
    // Liens Obsidian [[lien]]
    /\[.*?\]\(.*?\)/g,
    // Liens Markdown [texte](url)
    /!\[.*?\]\(.*?\)/g,
    // Images ![alt](url)
    /`[^`]+`/g,
    // Code inline `code`
    /```[\s\S]*?```/g,
    // Blocs de code
    />\s.*$/gm,
    // Callouts (lignes commençant par "> ")
    /<[^>]*>/g,
    // Balises HTML
    /\$\$[^$]*\$\$/g,
    // Équations mathématiques $$equation$$
    /\$[^$]*\$/g,
    // Équations mathématiques inline $equation$
    /\{[^}]*\}/g,
    // Contenu entre accolades {contenu}
    /https?:\/\/[^\s]+/g,
    // URLs avec http: ou https:
    /[a-z]+:\/\/[^\s]+/g,
    // Autres protocoles (ftp:, file:, etc.)
    /[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+/g
    // Adresses email
  ];
  let tempText = result;
  let elementIndex = 0;
  for (const pattern of patterns) {
    let match;
    let searchText = tempText;
    let replacedText = tempText;
    while ((match = pattern.exec(searchText)) !== null) {
      const placeholder = `__PRESERVED_ELEMENT_${elementIndex}__`;
      preservedElements.push(match[0]);
      replacedText = replacedText.replace(match[0], placeholder);
      elementIndex++;
    }
    tempText = replacedText;
  }
  tempText = applyRules(tempText, rules.frenchRules);
  tempText = applyRules(tempText, rules.dashRules);
  result = tempText;
  for (let i = 0; i < preservedElements.length; i++) {
    const placeholder = `__PRESERVED_ELEMENT_${i}__`;
    result = result.replace(placeholder, preservedElements[i]);
  }
  return result;
}
function processTextWithBlocks(text, blocks, rules) {
  const lines = text.split("\n");
  const processedLines = [];
  let normalTextBuffer = [];
  let lastBlockType = "";
  for (let i = 0; i < lines.length; i++) {
    const currentBlockType = blocks[i];
    const line = lines[i];
    if (currentBlockType === "normal") {
      normalTextBuffer.push(line);
    } else {
      if (normalTextBuffer.length > 0) {
        const processedBuffer = applyAllRules(normalTextBuffer.join("\n"), rules);
        processedLines.push(...processedBuffer.split("\n"));
        normalTextBuffer = [];
      }
      processedLines.push(line);
    }
    lastBlockType = currentBlockType;
  }
  if (normalTextBuffer.length > 0) {
    const processedBuffer = applyAllRules(normalTextBuffer.join("\n"), rules);
    processedLines.push(...processedBuffer.split("\n"));
  }
  return processedLines.join("\n");
}
async function processLargeDocument(text, blocks, rules, callback, batchSize = 500) {
  const lines = text.split("\n");
  const processedLines = [];
  for (let i = 0; i < Math.ceil(lines.length / batchSize); i++) {
    const startIdx = i * batchSize;
    const endIdx = Math.min((i + 1) * batchSize, lines.length);
    const batchLines = lines.slice(startIdx, endIdx);
    const batchBlocks = blocks.slice(startIdx, endIdx);
    const batchText = batchLines.join("\n");
    const processedBatch = processTextWithBlocks(batchText, batchBlocks, rules);
    processedLines.push(...processedBatch.split("\n"));
    if (i < Math.ceil(lines.length / batchSize) - 1) {
      await new Promise((resolve) => setTimeout(resolve, 0));
    }
  }
  callback(processedLines.join("\n"));
}

// src/modules/batchTypography.ts
var BatchTypographyModule = class {
  constructor(settings) {
    this.settings = settings;
  }
  /**
   * Initialise le module avec les paramètres actuels
   * @param settings Paramètres mis à jour
   */
  updateSettings(settings) {
    this.settings = settings;
  }
  /**
   * Applique toutes les règles typographiques sur un texte sélectionné
   * @param editor Éditeur Obsidian
   * @returns true si des modifications ont été appliquées
   */
  applyTypographicRules(editor) {
    const selection = editor.getSelection();
    if (!selection || selection.length === 0) {
      return false;
    }
    const selectionStart = editor.getCursor("from");
    const selectionEnd = editor.getCursor("to");
    const rules = compileRules(this.settings);
    const blocks = analyzeDocumentStructure(
      editor.getValue(),
      selectionStart.line,
      selectionEnd.line
    );
    const processedText = processTextWithBlocks(selection, blocks.lineTypes, rules);
    if (processedText === selection) {
      return false;
    }
    editor.replaceSelection(processedText);
    editor.setSelection(selectionStart, selectionEnd);
    return true;
  }
  /**
   * Traite de grands documents de manière asynchrone
   * @param editor Éditeur Obsidian
   * @param callback Fonction appelée lorsque le traitement est terminé
   */
  async processLargeSelection(editor, callback) {
    const selection = editor.getSelection();
    if (!selection || selection.length === 0) {
      if (callback)
        callback();
      return;
    }
    const selectionStart = editor.getCursor("from");
    const selectionEnd = editor.getCursor("to");
    if (selection.length < 1e4) {
      this.applyTypographicRules(editor);
      if (callback)
        callback();
      return;
    }
    const rules = compileRules(this.settings);
    const blocks = analyzeDocumentStructure(
      editor.getValue(),
      selectionStart.line,
      selectionEnd.line
    );
    await processLargeDocument(
      selection,
      blocks.lineTypes,
      rules,
      (processedText) => {
        editor.replaceSelection(processedText);
        editor.setSelection(selectionStart, selectionEnd);
        if (callback)
          callback();
      }
    );
  }
};

// main.ts
var Microtypographie = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.statusBarButton = null;
    this.tabTitleBarButton = null;
  }
  async onload() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.liveModule = new LiveTypographyModule(this.settings);
    this.batchModule = new BatchTypographyModule(this.settings);
    this.addSettingTab(new MicrotypographieSettingTab(this.app, this));
    this.registerDomEvent(document, "keydown", this.handleKeyDown.bind(this));
    await injectCSSFromFile(this, "styles/highlight.css");
    this.registerEditorExtension(createDecorations(this.settings));
    if (this.settings.highlightButton) {
      this.statusBarButton = createStatusBarButton(
        this,
        this.settings.highlightEnabled,
        this.toggleHighlight.bind(this)
      );
    }
    if (this.settings.tabTitleBarButton) {
      this.tabTitleBarButton = createTabTitleBarButton(
        this,
        this.settings.highlightEnabled,
        this.toggleHighlight.bind(this)
      );
    }
    this.addCommand({
      id: "apply-french-typography",
      name: "Appliquer les r\xE8gles typographiques fran\xE7aises",
      callback: () => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
        if (activeView) {
          this.batchModule.applyTypographicRules(activeView.editor);
        }
      },
      hotkeys: [{ modifiers: ["Alt"], key: "f" }]
    });
    this.addCommand({
      id: "toggle-highlight",
      name: "Afficher/Masquer les caract\xE8res invisibles",
      callback: () => {
        this.toggleHighlight();
      }
    });
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        if (this.settings.tabTitleBarButton) {
          if (this.tabTitleBarButton) {
            this.tabTitleBarButton.remove();
          }
          this.tabTitleBarButton = createTabTitleBarButton(
            this,
            this.settings.highlightEnabled,
            this.toggleHighlight.bind(this)
          );
        }
      })
    );
  }
  // Gérer les événements clavier (délègue au module d'aperçu direct)
  handleKeyDown(event) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (!activeView || activeView.getMode() !== "source") {
      return;
    }
    const leaf = this.app.workspace.getLeaf();
    if (!leaf)
      return;
    const activeState = leaf.getViewState().state;
    if (!activeState)
      return;
    if (activeView && activeView.getMode() === "source" && activeState["source"] === false) {
      this.liveModule.handleKeyEvent(event, activeView.editor);
    }
  }
  async loadSettings() {
    const savedData = await this.loadData();
    this.settings = Object.assign({}, DEFAULT_SETTINGS);
    if (savedData) {
      Object.keys(this.settings).forEach((key) => {
        if (key in savedData) {
          this.settings[key] = savedData[key];
        }
      });
      if ("apostrophe" in savedData || "quotationmarks" in savedData || "emdashes" in savedData) {
        console.log("Migration des param\xE8tres de Microtypographie vers la nouvelle version");
        if (savedData.apostrophe === false) {
          this.settings.openSingleQuote = "'";
          this.settings.closeSingleQuote = "'";
        }
        if (savedData.quotationmarks === false) {
          this.settings.openDoubleQuote = '"';
          this.settings.closeDoubleQuote = '"';
        }
        await this.saveSettings();
      }
    }
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.liveModule.updateSettings(this.settings);
    this.batchModule.updateSettings(this.settings);
    updateStatusBarButton(this.statusBarButton, this.settings.highlightEnabled);
    updateTabTitleBarButton(this.tabTitleBarButton, this.settings.highlightEnabled);
    this.refreshDecorations();
  }
  // Activer/désactiver la mise en évidence
  toggleHighlight() {
    this.settings.highlightEnabled = !this.settings.highlightEnabled;
    this.saveSettings();
  }
  // Rafraîchir les décorations
  refreshDecorations() {
    this.app.workspace.iterateAllLeaves((leaf) => {
      if (leaf.view instanceof import_obsidian3.MarkdownView && leaf.view.editor) {
        const editorView = leaf.view.editor.cm;
        if (editorView) {
          editorView.dispatch({
            changes: {
              from: 0,
              to: editorView.state.doc.length,
              insert: editorView.state.doc.toString()
            }
          });
        }
      }
    });
  }
  onunload() {
    removeTabTitleBarButton(this.tabTitleBarButton);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvc2V0dGluZ3Mvc2V0dGluZ3MudHMiLCAic3JjL3NldHRpbmdzL3NldHRpbmdzVGFiLnRzIiwgInNyYy91aS9kZWNvcmF0aW9ucy50cyIsICJzcmMvdWkvc3RhdHVzQmFyLnRzIiwgInNyYy9jb3JlL2Jsb2NrQW5hbHl6ZXIudHMiLCAic3JjL3V0aWxzL2hlbHBlcnMudHMiLCAic3JjL21vZHVsZXMvbGl2ZVR5cG9ncmFwaHkudHMiLCAic3JjL2NvcmUvdHlwb2dyYXBoeVJ1bGVzLnRzIiwgInNyYy9jb3JlL3RleHRQcm9jZXNzb3IudHMiLCAic3JjL21vZHVsZXMvYmF0Y2hUeXBvZ3JhcGh5LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBNYXJrZG93blZpZXcsIFBsdWdpbiB9IGZyb20gXCJvYnNpZGlhblwiO1xuLy8gaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgTWljcm90eXBvZ3JhcGhpZVNldHRpbmdzLCBERUZBVUxUX1NFVFRJTkdTIH0gZnJvbSAnLi9zcmMvc2V0dGluZ3Mvc2V0dGluZ3MnO1xuaW1wb3J0IHsgTWljcm90eXBvZ3JhcGhpZVNldHRpbmdUYWIgfSBmcm9tICcuL3NyYy9zZXR0aW5ncy9zZXR0aW5nc1RhYic7XG5pbXBvcnQgeyBjcmVhdGVEZWNvcmF0aW9ucyB9IGZyb20gJy4vc3JjL3VpL2RlY29yYXRpb25zJztcbmltcG9ydCB7IFxuICAgIGNyZWF0ZVN0YXR1c0JhckJ1dHRvbiwgXG4gICAgdXBkYXRlU3RhdHVzQmFyQnV0dG9uLCBcbiAgICBjcmVhdGVUYWJUaXRsZUJhckJ1dHRvbiwgXG4gICAgdXBkYXRlVGFiVGl0bGVCYXJCdXR0b24sIFxuICAgIHJlbW92ZVRhYlRpdGxlQmFyQnV0dG9uIFxufSBmcm9tICcuL3NyYy91aS9zdGF0dXNCYXInO1xuaW1wb3J0IHsgaW5qZWN0Q1NTRnJvbUZpbGUgfSBmcm9tICcuL3NyYy91dGlscy9oZWxwZXJzJztcblxuLy8gSW1wb3J0ZXIgbGVzIG5vdXZlYXV4IG1vZHVsZXNcbmltcG9ydCB7IExpdmVUeXBvZ3JhcGh5TW9kdWxlIH0gZnJvbSAnLi9zcmMvbW9kdWxlcy9saXZlVHlwb2dyYXBoeSc7XG5pbXBvcnQgeyBCYXRjaFR5cG9ncmFwaHlNb2R1bGUgfSBmcm9tICcuL3NyYy9tb2R1bGVzL2JhdGNoVHlwb2dyYXBoeSc7XG5cbmltcG9ydCB7IEVkaXRvclZpZXcgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivdmlld1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNaWNyb3R5cG9ncmFwaGllIGV4dGVuZHMgUGx1Z2luIHtcbiAgICBzZXR0aW5nczogTWljcm90eXBvZ3JhcGhpZVNldHRpbmdzO1xuICAgIHByaXZhdGUgc3RhdHVzQmFyQnV0dG9uOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgdGFiVGl0bGVCYXJCdXR0b246IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gICAgXG4gICAgLy8gSW5zdGFuY2VzIGRlcyBtb2R1bGVzXG4gICAgcHJpdmF0ZSBsaXZlTW9kdWxlOiBMaXZlVHlwb2dyYXBoeU1vZHVsZTtcbiAgICBwcml2YXRlIGJhdGNoTW9kdWxlOiBCYXRjaFR5cG9ncmFwaHlNb2R1bGU7XG5cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIC8vIENoYXJnZXIgbGVzIHBhcmFtXHUwMEU4dHJlc1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgICBcbiAgICAgICAgLy8gSW5pdGlhbGlzZXIgbGVzIG1vZHVsZXNcbiAgICAgICAgdGhpcy5saXZlTW9kdWxlID0gbmV3IExpdmVUeXBvZ3JhcGh5TW9kdWxlKHRoaXMuc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLmJhdGNoTW9kdWxlID0gbmV3IEJhdGNoVHlwb2dyYXBoeU1vZHVsZSh0aGlzLnNldHRpbmdzKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFqb3V0ZXIgbCdvbmdsZXQgZGUgcGFyYW1cdTAwRTh0cmVzXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgTWljcm90eXBvZ3JhcGhpZVNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcbiAgICBcbiAgICAgICAgLy8gRW5yZWdpc3RyZXIgbCdcdTAwRTl2XHUwMEU5bmVtZW50IGtleWRvd24gcG91ciBsZSBtb2R1bGUgZCdhcGVyXHUwMEU3dSBkaXJlY3RcbiAgICAgICAgdGhpcy5yZWdpc3RlckRvbUV2ZW50KGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bi5iaW5kKHRoaXMpKTtcbiAgICBcbiAgICAgICAgLy8gSW5qZWN0ZXIgbGUgQ1NTIHBvdXIgbGEgbWlzZSBlbiBcdTAwRTl2aWRlbmNlXG4gICAgICAgIGF3YWl0IGluamVjdENTU0Zyb21GaWxlKHRoaXMsIFwic3R5bGVzL2hpZ2hsaWdodC5jc3NcIik7XG5cbiAgICAgICAgLy8gRW5yZWdpc3RyZXIgbCdleHRlbnNpb24gZGUgbCdcdTAwRTlkaXRldXIgcG91ciBsZXMgZFx1MDBFOWNvcmF0aW9uc1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRWRpdG9yRXh0ZW5zaW9uKGNyZWF0ZURlY29yYXRpb25zKHRoaXMuc2V0dGluZ3MpKTtcblxuICAgICAgICAvLyBBam91dGVyIGxlIGJvdXRvbiBkYW5zIGxhIGJhcnJlIGQnXHUwMEU5dGF0IHNpIGwnb3B0aW9uIGVzdCBhY3Rpdlx1MDBFOWVcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0QnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXR1c0JhckJ1dHRvbiA9IGNyZWF0ZVN0YXR1c0JhckJ1dHRvbihcbiAgICAgICAgICAgICAgICB0aGlzLCBcbiAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLmhpZ2hsaWdodEVuYWJsZWQsXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVIaWdobGlnaHQuYmluZCh0aGlzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8vIEFqb3V0ZXIgbGUgYm91dG9uIGRhbnMgbGEgYmFycmUgZGUgdGl0cmUgZGVzIG9uZ2xldHMgc2kgbCdvcHRpb24gZXN0IGFjdGl2XHUwMEU5ZVxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy50YWJUaXRsZUJhckJ1dHRvbikge1xuICAgICAgICAgICAgdGhpcy50YWJUaXRsZUJhckJ1dHRvbiA9IGNyZWF0ZVRhYlRpdGxlQmFyQnV0dG9uKFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5oaWdobGlnaHRFbmFibGVkLFxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlSGlnaGxpZ2h0LmJpbmQodGhpcylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEFqb3V0ZXIgbGEgY29tbWFuZGUgcG91ciBhcHBsaXF1ZXIgbGVzIHJcdTAwRThnbGVzIHR5cG9ncmFwaGlxdWVzICh2aWEgbGUgbW9kdWxlIGRlIHRyYWl0ZW1lbnQgcGFyIGxvdClcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnYXBwbHktZnJlbmNoLXR5cG9ncmFwaHknLFxuICAgICAgICAgICAgbmFtZTogJ0FwcGxpcXVlciBsZXMgclx1MDBFOGdsZXMgdHlwb2dyYXBoaXF1ZXMgZnJhblx1MDBFN2Fpc2VzJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXRjaE1vZHVsZS5hcHBseVR5cG9ncmFwaGljUnVsZXMoYWN0aXZlVmlldy5lZGl0b3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBob3RrZXlzOiBbeyBtb2RpZmllcnM6IFtcIkFsdFwiXSwga2V5OiBcImZcIiB9XVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBBam91dGVyIGxhIGNvbW1hbmRlIHBvdXIgYWN0aXZlci9kXHUwMEU5c2FjdGl2ZXIgbGEgbWlzZSBlbiBcdTAwRTl2aWRlbmNlXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ3RvZ2dsZS1oaWdobGlnaHQnLFxuICAgICAgICAgICAgbmFtZTogJ0FmZmljaGVyL01hc3F1ZXIgbGVzIGNhcmFjdFx1MDBFOHJlcyBpbnZpc2libGVzJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVIaWdobGlnaHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBFbnJlZ2lzdHJlciB1biBcdTAwRTl2XHUwMEU5bmVtZW50IHBvdXIgbWV0dHJlIFx1MDBFMCBqb3VyIGxlIGJvdXRvbiBkZSBsYSBiYXJyZSBkZSB0aXRyZVxuICAgICAgICAvLyBsb3JzcXVlIGwndXRpbGlzYXRldXIgY2hhbmdlIGQnb25nbGV0IG91IGRlIHZ1ZVxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXG4gICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2FjdGl2ZS1sZWFmLWNoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBSZWNyXHUwMEU5ZXIgbGUgYm91dG9uIGRlIGxhIGJhcnJlIGRlIHRpdHJlIHNpIGwnb3B0aW9uIGVzdCBhY3Rpdlx1MDBFOWVcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy50YWJUaXRsZUJhckJ1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBTdXBwcmltZXIgbCdhbmNpZW4gYm91dG9uIHMnaWwgZXhpc3RlXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRhYlRpdGxlQmFyQnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhYlRpdGxlQmFyQnV0dG9uLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBDclx1MDBFOWVyIHVuIG5vdXZlYXUgYm91dG9uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFiVGl0bGVCYXJCdXR0b24gPSBjcmVhdGVUYWJUaXRsZUJhckJ1dHRvbihcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLmhpZ2hsaWdodEVuYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUhpZ2hsaWdodC5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBHXHUwMEU5cmVyIGxlcyBcdTAwRTl2XHUwMEU5bmVtZW50cyBjbGF2aWVyIChkXHUwMEU5bFx1MDBFOGd1ZSBhdSBtb2R1bGUgZCdhcGVyXHUwMEU3dSBkaXJlY3QpXG4gICAgcHJpdmF0ZSBoYW5kbGVLZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuICAgICAgICBpZiAoIWFjdGl2ZVZpZXcgfHwgYWN0aXZlVmlldy5nZXRNb2RlKCkgIT09ICdzb3VyY2UnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgY29uc3QgbGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCk7XG4gICAgICAgIGlmICghbGVhZikgcmV0dXJuO1xuICAgIFxuICAgICAgICBjb25zdCBhY3RpdmVTdGF0ZSA9IGxlYWYuZ2V0Vmlld1N0YXRlKCkuc3RhdGU7XG4gICAgICAgIGlmICghYWN0aXZlU3RhdGUpIHJldHVybjtcbiAgICBcbiAgICAgICAgaWYgKGFjdGl2ZVZpZXcgJiYgYWN0aXZlVmlldy5nZXRNb2RlKCkgPT09ICdzb3VyY2UnICYmIGFjdGl2ZVN0YXRlW1wic291cmNlXCJdID09PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gRFx1MDBFOWxcdTAwRTlndWVyIGxlIHRyYWl0ZW1lbnQgYXUgbW9kdWxlIGQnYXBlclx1MDBFN3UgZGlyZWN0XG4gICAgICAgICAgICB0aGlzLmxpdmVNb2R1bGUuaGFuZGxlS2V5RXZlbnQoZXZlbnQsIGFjdGl2ZVZpZXcuZWRpdG9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICAgICAgLy8gQ2hhcmdlciBsZXMgZG9ublx1MDBFOWVzIGJydXRlcyBzYXV2ZWdhcmRcdTAwRTllc1xuICAgICAgICBjb25zdCBzYXZlZERhdGEgPSBhd2FpdCB0aGlzLmxvYWREYXRhKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBDclx1MDBFOWVyIHVuIG5vdXZlbCBvYmpldCBkZSBwYXJhbVx1MDBFOHRyZXMgZW4gcGFydGFudCBkZXMgdmFsZXVycyBwYXIgZFx1MDBFOWZhdXRcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MpO1xuICAgICAgICBcbiAgICAgICAgLy8gU2kgZGVzIHBhcmFtXHUwMEU4dHJlcyBvbnQgXHUwMEU5dFx1MDBFOSBzYXV2ZWdhcmRcdTAwRTlzLCBsZXMgY29waWVyIGRhbnMgbGVzIG5vdXZlbGxlcyBwcm9wcmlcdTAwRTl0XHUwMEU5c1xuICAgICAgICBpZiAoc2F2ZWREYXRhKSB7XG4gICAgICAgICAgICAvLyBDb3BpZXIgdW5pcXVlbWVudCBsZXMgcHJvcHJpXHUwMEU5dFx1MDBFOXMgcXVpIGV4aXN0ZW50IGRhbnMgbGEgbm91dmVsbGUgaW50ZXJmYWNlXG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnNldHRpbmdzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSBpbiBzYXZlZERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuc2V0dGluZ3MgYXMgYW55KVtrZXldID0gKHNhdmVkRGF0YSBhcyBhbnkpW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIE1pZ3JhdGlvbiBkZXMgYW5jaWVubmVzIHByb3ByaVx1MDBFOXRcdTAwRTlzIHZlcnMgbGVzIG5vdXZlbGxlc1xuICAgICAgICAgICAgLy8gQ2V0dGUgcGFydGllIGVzdCBleFx1MDBFOWN1dFx1MDBFOWUgc2V1bGVtZW50IHNpIGxlcyBhbmNpZW5uZXMgcHJvcHJpXHUwMEU5dFx1MDBFOXMgZXhpc3RlbnRcbiAgICAgICAgICAgIGlmICgnYXBvc3Ryb3BoZScgaW4gc2F2ZWREYXRhIHx8ICdxdW90YXRpb25tYXJrcycgaW4gc2F2ZWREYXRhIHx8ICdlbWRhc2hlcycgaW4gc2F2ZWREYXRhKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJNaWdyYXRpb24gZGVzIHBhcmFtXHUwMEU4dHJlcyBkZSBNaWNyb3R5cG9ncmFwaGllIHZlcnMgbGEgbm91dmVsbGUgdmVyc2lvblwiKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBTaSBjZXMgYW5jaWVubmVzIG9wdGlvbnMgXHUwMEU5dGFpZW50IGRcdTAwRTlzYWN0aXZcdTAwRTllcywgb24gdmlkZSBsZXMgcGFyYW1cdTAwRTh0cmVzIGNvcnJlc3BvbmRhbnRzXG4gICAgICAgICAgICAgICAgLy8gcG91ciBkXHUwMEU5c2FjdGl2ZXIgbGVzIGZvbmN0aW9ubmFsaXRcdTAwRTlzXG4gICAgICAgICAgICAgICAgaWYgKHNhdmVkRGF0YS5hcG9zdHJvcGhlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLm9wZW5TaW5nbGVRdW90ZSA9IFwiJ1wiOyAgLy8gQXBvc3Ryb3BoZSBzdGFuZGFyZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLmNsb3NlU2luZ2xlUXVvdGUgPSBcIidcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHNhdmVkRGF0YS5xdW90YXRpb25tYXJrcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5vcGVuRG91YmxlUXVvdGUgPSBcIlxcXCJcIjsgIC8vIEd1aWxsZW1ldCBzdGFuZGFyZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLmNsb3NlRG91YmxlUXVvdGUgPSBcIlxcXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgaW1tXHUwMEU5ZGlhdGVtZW50IGxlcyBwYXJhbVx1MDBFOHRyZXMgbWlnclx1MDBFOXNcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICAgICAgICBcbiAgICAgICAgLy8gTWV0dHJlIFx1MDBFMCBqb3VyIGxlcyBtb2R1bGVzIGF2ZWMgbGVzIG5vdXZlYXV4IHBhcmFtXHUwMEU4dHJlc1xuICAgICAgICB0aGlzLmxpdmVNb2R1bGUudXBkYXRlU2V0dGluZ3ModGhpcy5zZXR0aW5ncyk7XG4gICAgICAgIHRoaXMuYmF0Y2hNb2R1bGUudXBkYXRlU2V0dGluZ3ModGhpcy5zZXR0aW5ncyk7XG4gICAgICAgIFxuICAgICAgICAvLyBNZXR0cmUgXHUwMEUwIGpvdXIgbCdVSVxuICAgICAgICB1cGRhdGVTdGF0dXNCYXJCdXR0b24odGhpcy5zdGF0dXNCYXJCdXR0b24sIHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0RW5hYmxlZCk7XG4gICAgICAgIHVwZGF0ZVRhYlRpdGxlQmFyQnV0dG9uKHRoaXMudGFiVGl0bGVCYXJCdXR0b24sIHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0RW5hYmxlZCk7XG4gICAgICAgIHRoaXMucmVmcmVzaERlY29yYXRpb25zKCk7XG4gICAgfVxuXG4gICAgLy8gQWN0aXZlci9kXHUwMEU5c2FjdGl2ZXIgbGEgbWlzZSBlbiBcdTAwRTl2aWRlbmNlXG4gICAgdG9nZ2xlSGlnaGxpZ2h0KCkge1xuICAgICAgICB0aGlzLnNldHRpbmdzLmhpZ2hsaWdodEVuYWJsZWQgPSAhdGhpcy5zZXR0aW5ncy5oaWdobGlnaHRFbmFibGVkO1xuICAgICAgICB0aGlzLnNhdmVTZXR0aW5ncygpO1xuICAgIH1cblxuICAgIC8vIFJhZnJhXHUwMEVFY2hpciBsZXMgZFx1MDBFOWNvcmF0aW9uc1xuICAgIHJlZnJlc2hEZWNvcmF0aW9ucygpIHtcbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLml0ZXJhdGVBbGxMZWF2ZXMoKGxlYWYpID0+IHtcbiAgICAgICAgICAgIGlmIChsZWFmLnZpZXcgaW5zdGFuY2VvZiBNYXJrZG93blZpZXcgJiYgbGVhZi52aWV3LmVkaXRvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVkaXRvclZpZXcgPSAobGVhZi52aWV3LmVkaXRvciBhcyBhbnkpLmNtIGFzIEVkaXRvclZpZXc7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGVkaXRvclZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yVmlldy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogZWRpdG9yVmlldy5zdGF0ZS5kb2MubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydDogZWRpdG9yVmlldy5zdGF0ZS5kb2MudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9udW5sb2FkKCkge1xuICAgICAgICAvLyBOZXR0b3llciBsZXMgXHUwMEU5bFx1MDBFOW1lbnRzIFVJXG4gICAgICAgIHJlbW92ZVRhYlRpdGxlQmFyQnV0dG9uKHRoaXMudGFiVGl0bGVCYXJCdXR0b24pO1xuICAgIH1cbn0iLCAiLy8gRmljaGllciBzZXR0aW5ncy50cyBhdmVjIGxlcyBub3V2ZWxsZXMgb3B0aW9uc1xyXG5cclxuLyoqXHJcbiAqIEludGVyZmFjZSBwb3VyIGxlcyBwYXJhbVx1MDBFOHRyZXMgZHUgcGx1Z2luXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1pY3JvdHlwb2dyYXBoaWVTZXR0aW5ncyB7XHJcbiAgICBvcGVuRG91YmxlUXVvdGU6IHN0cmluZztcclxuICAgIGNsb3NlRG91YmxlUXVvdGU6IHN0cmluZztcclxuICAgIG9wZW5TaW5nbGVRdW90ZTogc3RyaW5nO1xyXG4gICAgY2xvc2VTaW5nbGVRdW90ZTogc3RyaW5nO1xyXG4gICAgZnJlbmNoUnVsZXNFbmFibGVkOiBib29sZWFuO1xyXG4gICAgZGFzaGVzRW5hYmxlZDogYm9vbGVhbjsgICAgIC8vIENvbnZlcnRpciAtLSBlbiBcdTIwMTMsIFx1MjAxMy0gZW4gXHUyMDE0LCBcdTIwMTQtIGVuIC0tLVxyXG4gICAgc2tpcEVuRGFzaDogYm9vbGVhbjsgICAgICAgIC8vIENvbnZlcnRpciBkaXJlY3RlbWVudCAtLSBlbiBcdTIwMTQgKHNhdXRlciBsZSB0aXJldCBkZW1pLWNhZHJhdGluKVxyXG4gICAgZWxsaXBzaXNFbmFibGVkOiBib29sZWFuOyAgIC8vIENvbnZlcnRpciAuLi4gZW4gXHUyMDI2XHJcbiAgICBndWlsbGVtZXRzRW5hYmxlZDogYm9vbGVhbjsgLy8gQ29udmVydGlyIDw8IGV0ID4+IGVuIFx1MDBBQiBldCBcdTAwQkJcclxuICAgIGhpZ2hsaWdodEVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBoaWdobGlnaHRCdXR0b246IGJvb2xlYW47XHJcbiAgICB0YWJUaXRsZUJhckJ1dHRvbjogYm9vbGVhbjsgLy8gQm91dG9uIGRhbnMgbGEgYmFycmUgZGUgdGl0cmUgZGVzIG9uZ2xldHNcclxufVxyXG5cclxuLyoqXHJcbiAqIFBhcmFtXHUwMEU4dHJlcyBwYXIgZFx1MDBFOWZhdXRcclxuICovXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBNaWNyb3R5cG9ncmFwaGllU2V0dGluZ3MgPSB7XHJcbiAgICBvcGVuRG91YmxlUXVvdGU6IFwiXHUwMEFCXFx1MjAyRlwiLCAgLy8gR3VpbGxlbWV0IGZyYW5cdTAwRTdhaXMgb3V2cmFudCBhdmVjIGVzcGFjZSBmaW5lIGluc1x1MDBFOWNhYmxlXHJcbiAgICBjbG9zZURvdWJsZVF1b3RlOiBcIlxcdTIwMkZcdTAwQkJcIiwgLy8gR3VpbGxlbWV0IGZyYW5cdTAwRTdhaXMgZmVybWFudCBhdmVjIGVzcGFjZSBmaW5lIGluc1x1MDBFOWNhYmxlXHJcbiAgICBvcGVuU2luZ2xlUXVvdGU6IFwiXHUyMDE5XCIsICAgICAgICAvLyBBcG9zdHJvcGhlIHR5cG9ncmFwaGlxdWVcclxuICAgIGNsb3NlU2luZ2xlUXVvdGU6IFwiXHUyMDE4XCIsICAgICAgIC8vIEFwb3N0cm9waGUgdHlwb2dyYXBoaXF1ZVxyXG4gICAgZnJlbmNoUnVsZXNFbmFibGVkOiB0cnVlLFxyXG4gICAgZGFzaGVzRW5hYmxlZDogdHJ1ZSxcclxuICAgIHNraXBFbkRhc2g6IGZhbHNlLFxyXG4gICAgZWxsaXBzaXNFbmFibGVkOiB0cnVlLFxyXG4gICAgZ3VpbGxlbWV0c0VuYWJsZWQ6IGZhbHNlLFxyXG4gICAgaGlnaGxpZ2h0RW5hYmxlZDogZmFsc2UsXHJcbiAgICBoaWdobGlnaHRCdXR0b246IHRydWUsXHJcbiAgICB0YWJUaXRsZUJhckJ1dHRvbjogdHJ1ZSwgICAgIC8vIEFjdGl2XHUwMEU5IHBhciBkXHUwMEU5ZmF1dFxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBWXHUwMEU5cmlmaWUgc2kgbGVzIHBhcmFtXHUwMEU4dHJlcyBzb250IHZhbGlkZXMgZXQgY29tcGxldHNcclxuICogQHBhcmFtIHNldHRpbmdzIFBhcmFtXHUwMEU4dHJlcyBcdTAwRTAgdlx1MDBFOXJpZmllclxyXG4gKiBAcmV0dXJucyBQYXJhbVx1MDBFOHRyZXMgdmFsaWRcdTAwRTlzIGV0IGNvbXBsXHUwMEU5dFx1MDBFOXMgc2kgblx1MDBFOWNlc3NhaXJlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTZXR0aW5ncyhzZXR0aW5nczogUGFydGlhbDxNaWNyb3R5cG9ncmFwaGllU2V0dGluZ3M+KTogTWljcm90eXBvZ3JhcGhpZVNldHRpbmdzIHtcclxuICAgIGNvbnN0IHZhbGlkYXRlZFNldHRpbmdzID0geyAuLi5ERUZBVUxUX1NFVFRJTkdTIH07XHJcbiAgICBcclxuICAgIGlmIChzZXR0aW5ncykge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKERFRkFVTFRfU0VUVElOR1MpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgaWYgKGtleSBpbiBzZXR0aW5ncykge1xyXG4gICAgICAgICAgICAgICAgKHZhbGlkYXRlZFNldHRpbmdzIGFzIGFueSlba2V5XSA9IChzZXR0aW5ncyBhcyBhbnkpW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHZhbGlkYXRlZFNldHRpbmdzO1xyXG59IiwgImltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG4vLyBpbXBvcnQgeyBNaWNyb3R5cG9ncmFwaGllU2V0dGluZ3MgfSBmcm9tIFwiLi9zZXR0aW5nc1wiO1xyXG5pbXBvcnQgdHlwZSBNaWNyb3R5cG9ncmFwaGllIGZyb20gXCIuLi8uLi9tYWluXCI7XHJcblxyXG4vKipcclxuICogT25nbGV0IGRlIGNvbmZpZ3VyYXRpb24gZHUgcGx1Z2luIGRhbnMgbGVzIHBhcmFtXHUwMEU4dHJlcyBkJ09ic2lkaWFuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWljcm90eXBvZ3JhcGhpZVNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuICBwbHVnaW46IE1pY3JvdHlwb2dyYXBoaWU7XHJcbiAgcHJpdmF0ZSB3b3Jkc0lucHV0Q29udGFpbmVyOiBIVE1MRWxlbWVudDsgLy8gUG91ciBzdG9ja2VyIGxhIHJcdTAwRTlmXHUwMEU5cmVuY2UgYXUgY29udGFpbmVyIGR1IGNoYW1wIGRlIHRleHRlXHJcblxyXG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IE1pY3JvdHlwb2dyYXBoaWUpIHtcclxuICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gIH1cclxuXHJcbiAgZGlzcGxheSgpOiB2b2lkIHtcclxuICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcblxyXG4gICAgY29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImgzXCIsIHsgdGV4dDogXCJNaWNyb3R5cG9ncmFwaGllXCIgfSk7XHJcblxyXG4gICAgLy8gQmxvYyBkJ2luZm9ybWF0aW9uXHJcbiAgICAvLyB0aGlzLmNyZWF0ZUluZm9CbG9jayhjb250YWluZXJFbCk7XHJcblxyXG4gICAgLy8gUGFyYW1cdTAwRTh0cmVzIGRlIGJhc2VcclxuICAgIHRoaXMuY3JlYXRlQmFzaWNTZXR0aW5ncyhjb250YWluZXJFbCk7XHJcblxyXG4gICAgLy8gUGFyYW1cdTAwRTh0cmVzIGRlIG1pc2UgZW4gXHUwMEU5dmlkZW5jZVxyXG4gICAgdGhpcy5jcmVhdGVIaWdobGlnaHRTZXR0aW5ncyhjb250YWluZXJFbCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDclx1MDBFOWUgbGUgYmxvYyBkJ2luZm9ybWF0aW9uXHJcbiAgICogQHBhcmFtIGNvbnRhaW5lckVsIENvbnRlbmV1ciBwYXJlbnRcclxuICAgKi9cclxuICBwcml2YXRlIGNyZWF0ZUluZm9CbG9jayhjb250YWluZXJFbDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgIGNvbnN0IGluZm9Db250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVFbChcImRpdlwiLCB7XHJcbiAgICAgIGNsczogXCJtaWNyb3R5cG9ncmFwaGllLWluZm8tY29udGFpbmVyXCIsXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBpbmZvQ29udGVudCA9IGluZm9Db250YWluZXIuY3JlYXRlRWwoXCJkaXZcIiwge1xyXG4gICAgICBjbHM6IFwibWljcm90eXBvZ3JhcGhpZS1pbmZvLWNvbnRlbnRcIixcclxuICAgIH0pO1xyXG5cclxuICAgIGluZm9Db250ZW50LmNyZWF0ZUVsKFwicFwiLCB7XHJcbiAgICAgIHRleHQ6IFwiQ2UgcGx1Z2luIGFwcGxpcXVlIGF1dG9tYXRpcXVlbWVudCB1bmUgcGFydGllIGRlcyByXHUwMEU4Z2xlcyB0eXBvZ3JhcGhpcXVlcyBmcmFuXHUwMEU3YWlzZXMgcGVuZGFudCBsYSBzYWlzaWUuXCIsXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBydWxlc0xpc3QgPSBpbmZvQ29udGVudC5jcmVhdGVFbChcInVsXCIpO1xyXG4gICAgcnVsZXNMaXN0LmNyZWF0ZUVsKFwibGlcIiwge1xyXG4gICAgICB0ZXh0OiBcIkVzcGFjZXMgaW5zXHUwMEU5Y2FibGVzIGF2YW50IGxlcyBwb25jdHVhdGlvbnMgZG91YmxlcyAoISA/IDsgXHUwMEJCKVwiLFxyXG4gICAgfSk7XHJcbiAgICBydWxlc0xpc3QuY3JlYXRlRWwoXCJsaVwiLCB7IHRleHQ6IFwiRXNwYWNlcyBmaW5lcyBpbnNcdTAwRTljYWJsZXMgYXZhbnQgKDopXCIgfSk7XHJcbiAgICBydWxlc0xpc3QuY3JlYXRlRWwoXCJsaVwiLCB7XHJcbiAgICAgIHRleHQ6IFwiRXNwYWNlcyBmaW5lcyBpbnNcdTAwRTljYWJsZXMgZGFucyBsZXMgZ3VpbGxlbWV0cyBmcmFuXHUwMEU3YWlzIChcdTAwQUJcXHUyMDJGcGhyYXNlXFx1MjAyRlx1MDBCQilcIixcclxuICAgIH0pO1xyXG4gICAgcnVsZXNMaXN0LmNyZWF0ZUVsKFwibGlcIiwgeyB0ZXh0OiBcIkFwb3N0cm9waGUgdHlwb2dyYXBoaXF1ZSAoXHUyMDE5KVwiIH0pO1xyXG4gICAgcnVsZXNMaXN0LmNyZWF0ZUVsKFwibGlcIiwge1xyXG4gICAgICB0ZXh0OiBcIkNvbnZlcnNpb24gZGUgKC0tKSBlbiB0aXJldCBjYWRyYXRpbiAoXHUyMDE0KVwiLFxyXG4gICAgfSk7XHJcblxyXG4gICAgaW5mb0NvbnRlbnQuY3JlYXRlRWwoXCJwXCIsIHtcclxuICAgICAgdGV4dDogXCJVdGlsaXNleiBBbHQrRiBwb3VyIGFwcGxpcXVlciB0b3V0ZXMgbGVzIHJcdTAwRThnbGVzIHN1ciB1biB0ZXh0ZSBleGlzdGFudC5cIixcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHRyYW5zZm9ybWF0aW9uc0xpc3QgPSBpbmZvQ29udGVudC5jcmVhdGVFbChcInVsXCIpO1xyXG4gICAgdHJhbnNmb3JtYXRpb25zTGlzdC5jcmVhdGVFbChcImxpXCIsIHtcclxuICAgICAgdGV4dDogJ0NvbnZlcnNpb24gZGUgKFwiIFwiKSBlbiBndWlsbGVtZXRzIGZyYW5cdTAwRTdhaXMgKFx1MDBBQiBcdTAwQkIpJyxcclxuICAgIH0pO1xyXG4gICAgdHJhbnNmb3JtYXRpb25zTGlzdC5jcmVhdGVFbChcImxpXCIsIHtcclxuICAgICAgdGV4dDogXCJDb252ZXJzaW9uIGRlICcgZW4gYXBvc3Ryb3BoZSB0eXBvZ3JhcGhpcXVlIChcdTIwMTkpXCIsXHJcbiAgICB9KTtcclxuICAgIHRyYW5zZm9ybWF0aW9uc0xpc3QuY3JlYXRlRWwoXCJsaVwiLCB7XHJcbiAgICAgIHRleHQ6IFwiRXNwYWNlIGZpbmUgaW5zXHUwMEU5Y2FibGUgYXZhbnQgOiAoISA/IDsgXHUwMEJCIFx1MjAzQSlcIixcclxuICAgIH0pO1xyXG4gICAgdHJhbnNmb3JtYXRpb25zTGlzdC5jcmVhdGVFbChcImxpXCIsIHtcclxuICAgICAgdGV4dDogXCJFc3BhY2UgaW5zXHUwMEU5Y2FibGUgYXZhbnQgOiAoOilcIixcclxuICAgIH0pO1xyXG4gICAgdHJhbnNmb3JtYXRpb25zTGlzdC5jcmVhdGVFbChcImxpXCIsIHtcclxuICAgICAgdGV4dDogXCJFc3BhY2UgZmluZSBpbnNcdTAwRTljYWJsZSBhcHJcdTAwRThzIDogKFx1MDBBQiBcdTIwMzkpXCIsXHJcbiAgICB9KTtcclxuICAgIHRyYW5zZm9ybWF0aW9uc0xpc3QuY3JlYXRlRWwoXCJsaVwiLCB7XHJcbiAgICAgIHRleHQ6IFwiRXNwYWNlIGluc1x1MDBFOWNhYmxlIGFwclx1MDBFOHMgbGVzIG1vdHMgZCd1bmUgbGV0dHJlIChhLCB5LCBcdTAwRTAgXHUyMDI2KVwiLFxyXG4gICAgfSk7XHJcbiAgICB0cmFuc2Zvcm1hdGlvbnNMaXN0LmNyZWF0ZUVsKFwibGlcIiwge1xyXG4gICAgICB0ZXh0OiBcIkVzcGFjZSBpbnNcdTAwRTljYWJsZSBkYW5zIGxlcyBub21zIGNvbXBvc1x1MDBFOXMgKEplYW5cXHUwMEEwRHVwb250KVwiLFxyXG4gICAgfSk7XHJcbiAgICB0cmFuc2Zvcm1hdGlvbnNMaXN0LmNyZWF0ZUVsKFwibGlcIiwge1xyXG4gICAgICB0ZXh0OiBcIkVzcGFjZSBpbnNcdTAwRTljYWJsZSBhdmFudCBsZXMgaW5pdGlhbGVzIChNLlxcdTAwQTBEdXBvbnQpXCIsXHJcbiAgICB9KTtcclxuICAgIHRyYW5zZm9ybWF0aW9uc0xpc3QuY3JlYXRlRWwoXCJsaVwiLCB7XHJcbiAgICAgIHRleHQ6IFwiRXNwYWNlIGluc1x1MDBFOWNhYmxlIGF2YW50IChzaVx1MDBFOGNsZSkgKFhYZVxcdTAwQTBzaVx1MDBFOGNsZSlcIixcclxuICAgIH0pO1xyXG4gICAgdHJhbnNmb3JtYXRpb25zTGlzdC5jcmVhdGVFbChcImxpXCIsIHtcclxuICAgICAgdGV4dDogXCJDb252ZXJzaW9uIGRlIChvZS9PRSkgZW4gbGlnYXR1cmVzIChcdTAxNTMvXHUwMTUyKVwiLFxyXG4gICAgfSk7XHJcbiAgICB0cmFuc2Zvcm1hdGlvbnNMaXN0LmNyZWF0ZUVsKFwibGlcIiwge1xyXG4gICAgICB0ZXh0OiBcIkNvbnZlcnNpb24gZGUgKC0tKSBlbiB0aXJldCBjYWRyYXRpbiAoXHUyMDE0KVwiLFxyXG4gICAgfSk7XHJcbiAgICB0cmFuc2Zvcm1hdGlvbnNMaXN0LmNyZWF0ZUVsKFwibGlcIiwge1xyXG4gICAgICB0ZXh0OiBcIkNvbnZlcnNpb24gZGUgKC4uLikgZW4gcG9pbnRzIGRlIHN1c3BlbnNpb24gKFx1MjAyNilcIixcclxuICAgIH0pO1xyXG5cclxuICAgIGluZm9Db250ZW50LmNyZWF0ZUVsKFwicFwiLCB7XHJcbiAgICAgIHRleHQ6IFwiSW5mbyBwb3VyIGluc1x1MDBFOXJlciB1bmUgZXNwYWNlIGluc1x1MDBFOWNhYmxlIGF2ZWMgT2JzaWRpYW4gOlwiLFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ3JcdTAwRTllciB1bmUgbGlzdGUgcG91ciBsZXMgcmFjY291cmNpc1xyXG4gICAgY29uc3Qgc2hvcnRjdXRzTGlzdCA9IGluZm9Db250ZW50LmNyZWF0ZUVsKFwidWxcIik7XHJcbiAgICBzaG9ydGN1dHNMaXN0LmNyZWF0ZUVsKFwibGlcIiwgeyB0ZXh0OiBcIldpbmRvd3MgOiBBbHQrMjU1XCIgfSk7XHJcbiAgICBzaG9ydGN1dHNMaXN0LmNyZWF0ZUVsKFwibGlcIiwgeyB0ZXh0OiBcIm1hY09TIDogQWx0K0VzcGFjZVwiIH0pO1xyXG5cclxuICAgIC8vIEFqb3V0ZXIgZHUgc3R5bGUgQ1NTIGVuIGxpZ25lIHBvdXIgbGUgYmxvYyBkJ2luZm9ybWF0aW9uXHJcbiAgICB0aGlzLmFkZEluZm9CbG9ja1N0eWxlcygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWpvdXRlIGxlcyBzdHlsZXMgQ1NTIHBvdXIgbGUgYmxvYyBkJ2luZm9ybWF0aW9uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhZGRJbmZvQmxvY2tTdHlsZXMoKTogdm9pZCB7XHJcbiAgICBjb25zdCBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XHJcbiAgICBzdHlsZUVsZW1lbnQudGV4dENvbnRlbnQgPSBgXHJcbiAgICAgICAgLm1pY3JvdHlwb2dyYXBoaWUtaW5mby1jb250YWluZXIge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKHZhcigtLWludGVyYWN0aXZlLWFjY2VudC1yZ2IpLCAwLjEpO1xyXG4gICAgICAgICAgICBib3JkZXItbGVmdDogNHB4IHNvbGlkIHZhcigtLWludGVyYWN0aXZlLWFjY2VudCk7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMWVtIDA7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDFlbTtcclxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAubWljcm90eXBvZ3JhcGhpZS1pbmZvLWNvbnRhaW5lciBoMiB7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4yZW07XHJcbiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAubWljcm90eXBvZ3JhcGhpZS1pbmZvLWNvbnRlbnQgcCB7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMC41ZW0gMDtcclxuICAgICAgICB9XHJcbiAgICBgO1xyXG5cclxuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcclxuICB9XHJcblxyXG4vKipcclxuICogQ3JcdTAwRTllIGxlcyBwYXJhbVx1MDBFOHRyZXMgZGUgYmFzZVxyXG4gKiBAcGFyYW0gY29udGFpbmVyRWwgQ29udGVuZXVyIHBhcmVudFxyXG4gKi9cclxucHJpdmF0ZSBjcmVhdGVCYXNpY1NldHRpbmdzKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gIC8vIEFqb3V0ZXIgbGVzIG5vdXZlYXV4IHBhcmFtXHUwMEU4dHJlcyBwZXJzb25uYWxpc2FibGVzXHJcbiAgY29uc3QgZGVzRWwgPSBjb250YWluZXJFbC5jcmVhdGVFbChcInBcIiwge1xyXG4gICAgdGV4dDogXCJDYXJhY3RcdTAwRThyZXMgdHlwb2dyYXBoaXF1ZXMgcGVyc29ubmFsaXNhYmxlc1wiLFxyXG4gIH0pO1xyXG4gIGRlc0VsLnN0eWxlLmZvbnRXZWlnaHQgPSBcImJvbGRcIjtcclxuXHJcbiAgLy8gT3B0aW9uIHBvdXIgbGUgZ3VpbGxlbWV0IGRvdWJsZSBvdXZyYW50XHJcbiAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAuc2V0TmFtZShcIkd1aWxsZW1ldCBkb3VibGUgb3V2cmFudFwiKVxyXG4gICAgLmFkZFRleHQoKHRleHQpID0+XHJcbiAgICAgIHRleHRcclxuICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mub3BlbkRvdWJsZVF1b3RlKVxyXG4gICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm9wZW5Eb3VibGVRdW90ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gIC8vIE9wdGlvbiBwb3VyIGxlIGd1aWxsZW1ldCBkb3VibGUgZmVybWFudFxyXG4gIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgLnNldE5hbWUoXCJHdWlsbGVtZXQgZG91YmxlIGZlcm1hbnRcIilcclxuICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG4gICAgICB0ZXh0XHJcbiAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNsb3NlRG91YmxlUXVvdGUpXHJcbiAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY2xvc2VEb3VibGVRdW90ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gIC8vIE9wdGlvbiBwb3VyIGxlIGd1aWxsZW1ldCBzaW1wbGUgb3V2cmFudCAoYXBvc3Ryb3BoZSlcclxuICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgIC5zZXROYW1lKFwiR3VpbGxlbWV0IHNpbXBsZSBvdXZyYW50XCIpXHJcbiAgICAuYWRkVGV4dCgodGV4dCkgPT5cclxuICAgICAgdGV4dFxyXG4gICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuU2luZ2xlUXVvdGUpXHJcbiAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mub3BlblNpbmdsZVF1b3RlID0gdmFsdWU7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgLy8gT3B0aW9uIHBvdXIgbGUgZ3VpbGxlbWV0IHNpbXBsZSBmZXJtYW50IChhcG9zdHJvcGhlKVxyXG4gIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgLnNldE5hbWUoXCJHdWlsbGVtZXQgc2ltcGxlIGZlcm1hbnRcIilcclxuICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG4gICAgICB0ZXh0XHJcbiAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNsb3NlU2luZ2xlUXVvdGUpXHJcbiAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY2xvc2VTaW5nbGVRdW90ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gIC8vIFNlY3Rpb24gcG91ciBsZXMgbm91dmVsbGVzIG9wdGlvbnNcclxuICBjb25zdCB0cmFuc2Zvcm1UaXRsZSA9IGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwicFwiLCB7XHJcbiAgICB0ZXh0OiBcIk9wdGlvbnNcIixcclxuICB9KTtcclxuICB0cmFuc2Zvcm1UaXRsZS5zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCI7XHJcbiAgdHJhbnNmb3JtVGl0bGUuc3R5bGUubWFyZ2luVG9wID0gXCIxLjVlbVwiO1xyXG5cclxuICAvLyBPcHRpb24gcG91ciBsZXMgdGlyZXRzXHJcbiAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAuc2V0TmFtZShcIlRpcmV0c1wiKVxyXG4gICAgLnNldERlc2MoXHJcbiAgICAgIFwiLS0gZGV2aWVudCB0aXJldCBkZW1pLWNhZHJhdGluIChcdTIwMTMpLCBcdTIwMTMtIGRldmllbnQgdGlyZXQgY2FkcmF0aW4gKFx1MjAxNCksIFx1MjAxNC0gZGV2aWVudCB0cm9pcyB0aXJldHMgKC0tLSlcIlxyXG4gICAgKVxyXG4gICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxyXG4gICAgICB0b2dnbGVcclxuICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGFzaGVzRW5hYmxlZClcclxuICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kYXNoZXNFbmFibGVkID0gdmFsdWU7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgLy8gT3B0aW9uIHBvdXIgc2F1dGVyIGxlIHRpcmV0IGRlbWktY2FkcmF0aW5cclxuICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgIC5zZXROYW1lKFwiSWdub3JlciBsZSB0aXJldCBkZW1pLWNhZHJhdGluXCIpXHJcbiAgICAuc2V0RGVzYyhcclxuICAgICAgXCJRdWFuZCBhY3Rpdlx1MDBFOSwgLS0gZXN0IGRpcmVjdGVtZW50IGNvbnZlcnRpIGVuIHRpcmV0IGNhZHJhdGluIChcdTIwMTQpIHBsdXRcdTAwRjR0IHF1J2VuIGRlbWktY2FkcmF0aW4gKFx1MjAxMylcIlxyXG4gICAgKVxyXG4gICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxyXG4gICAgICB0b2dnbGVcclxuICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2tpcEVuRGFzaClcclxuICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5za2lwRW5EYXNoID0gdmFsdWU7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgLy8gT3B0aW9uIHBvdXIgbGVzIHBvaW50cyBkZSBzdXNwZW5zaW9uXHJcbiAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAuc2V0TmFtZShcIlBvaW50cyBkZSBzdXNwZW5zaW9uXCIpXHJcbiAgICAuc2V0RGVzYyhcclxuICAgICAgXCJUcm9pcyBwb2ludHMgKC4uLikgc2Vyb250IGNvbnZlcnRpcyBlbiBwb2ludHMgZGUgc3VzcGVuc2lvbiAoXHUyMDI2KVwiXHJcbiAgICApXHJcbiAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcbiAgICAgIHRvZ2dsZVxyXG4gICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbGxpcHNpc0VuYWJsZWQpXHJcbiAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZWxsaXBzaXNFbmFibGVkID0gdmFsdWU7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgLy8gT3B0aW9uIHBvdXIgbGVzIGd1aWxsZW1ldHMgY2hldnJvbnNcclxuICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgIC5zZXROYW1lKFwiR3VpbGxlbWV0c1wiKVxyXG4gICAgLnNldERlc2MoXHJcbiAgICAgIFwiTGVzIGNoZXZyb25zIDw8IGV0ID4+IHNlcm9udCBjb252ZXJ0aXMgZW4gZ3VpbGxlbWV0cyBmcmFuXHUwMEU3YWlzIFx1MDBBQiBldCBcdTAwQkJcIlxyXG4gICAgKVxyXG4gICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxyXG4gICAgICB0b2dnbGVcclxuICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZ3VpbGxlbWV0c0VuYWJsZWQpXHJcbiAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZ3VpbGxlbWV0c0VuYWJsZWQgPSB2YWx1ZTtcclxuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAvLyBjb25zdCBmcmVuY2hSdWxlc1RpdGxlID0gY29udGFpbmVyRWwuY3JlYXRlRWwoXCJwXCIsIHtcclxuICAvLyAgIHRleHQ6IFwiUlx1MDBFOGdsZXMgdHlwb2dyYXBoaXF1ZXMgcGFyIGxhbmd1ZVwiLFxyXG4gIC8vIH0pO1xyXG4gIC8vIGZyZW5jaFJ1bGVzVGl0bGUuc3R5bGUuZm9udFdlaWdodCA9IFwiYm9sZFwiO1xyXG5cclxuICAvLyBDclx1MDBFOWVyIHVuIGNvbnRlbmV1ciBwb3VyIGxlcyByXHUwMEU4Z2xlcyBmcmFuXHUwMEU3YWlzZXMgZXQgbGV1ciBkZXNjcmlwdGlvblxyXG4gIGNvbnN0IGZyZW5jaFJ1bGVzQ29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRWwoXCJkaXZcIik7XHJcbiAgZnJlbmNoUnVsZXNDb250YWluZXIuc3R5bGUubWFyZ2luVG9wID0gXCIzZW1cIjtcclxuXHJcblxyXG4gIC8vIE9wdGlvbiBwb3VyIGxlcyByXHUwMEU4Z2xlcyB0eXBvZ3JhcGhpcXVlcyBmcmFuXHUwMEU3YWlzZXMgYXZlYyB0b2dnbGVcclxuICBjb25zdCBmcmVuY2hSdWxlc1NldHRpbmcgPSBuZXcgU2V0dGluZyhmcmVuY2hSdWxlc0NvbnRhaW5lcilcclxuICAgIC5zZXROYW1lKFwiUlx1MDBFOGdsZXMgdHlwb2dyYXBoaXF1ZXMgZnJhblx1MDBFN2Fpc2VzXCIpXHJcbiAgICAuc2V0RGVzYyhcclxuICAgICAgXCJcIlxyXG4gICAgKVxyXG4gICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxyXG4gICAgICB0b2dnbGVcclxuICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZnJlbmNoUnVsZXNFbmFibGVkKVxyXG4gICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmZyZW5jaFJ1bGVzRW5hYmxlZCA9IHZhbHVlO1xyXG4gICAgICAgICAgLy8gQWZmaWNoZXIgb3UgbWFzcXVlciBsYSBkZXNjcmlwdGlvbiBkZXMgclx1MDBFOGdsZXNcclxuICAgICAgICAgIGZyZW5jaFJ1bGVzRGVzY0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBcImJsb2NrXCIgOiBcIm5vbmVcIjtcclxuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IG5hbWVFbCA9IGZyZW5jaFJ1bGVzU2V0dGluZy5uYW1lRWw7XHJcbiAgICBpZiAobmFtZUVsKSB7XHJcbiAgICAgIG5hbWVFbC5zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCI7XHJcbiAgICAgIC8vIG5hbWVFbC5zdHlsZS5tYXJnaW5Ub3AgPSBcIjNlbVwiO1xyXG4gICAgfVxyXG5cclxuICAvLyBDb250ZW5ldXIgcG91ciBsYSBkZXNjcmlwdGlvbiBkZXMgclx1MDBFOGdsZXMgZnJhblx1MDBFN2Fpc2VzXHJcbiAgY29uc3QgZnJlbmNoUnVsZXNEZXNjQ29udGFpbmVyID0gZnJlbmNoUnVsZXNDb250YWluZXIuY3JlYXRlRWwoXCJkaXZcIiwge1xyXG4gICAgY2xzOiBcImZyZW5jaC1ydWxlcy1kZXNjcmlwdGlvblwiXHJcbiAgfSk7XHJcbiAgXHJcbiAgLy8gRFx1MDBFOWZpbmlyIGxhIHZpc2liaWxpdFx1MDBFOSBpbml0aWFsZVxyXG4gIGZyZW5jaFJ1bGVzRGVzY0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuZnJlbmNoUnVsZXNFbmFibGVkID8gXCJibG9ja1wiIDogXCJub25lXCI7XHJcbiAgZnJlbmNoUnVsZXNEZXNjQ29udGFpbmVyLnN0eWxlLnBhZGRpbmdMZWZ0ID0gXCIyNHB4XCI7XHJcbiAgZnJlbmNoUnVsZXNEZXNjQ29udGFpbmVyLnN0eWxlLm1hcmdpblRvcCA9IFwiOHB4XCI7XHJcblxyXG4gIC8vIEFqb3V0ZXIgdW5lIGRlc2NyaXB0aW9uIGRlcyByXHUwMEU4Z2xlcyB0eXBvZ3JhcGhpcXVlcyBmcmFuXHUwMEU3YWlzZXNcclxuICBjb25zdCBmcmVuY2hSdWxlc0Rlc2MgPSBmcmVuY2hSdWxlc0Rlc2NDb250YWluZXIuY3JlYXRlRWwoXCJkaXZcIiwge1xyXG4gICAgY2xzOiBcInNldHRpbmctaXRlbS1kZXNjcmlwdGlvblwiLFxyXG4gIH0pO1xyXG5cclxuICBmcmVuY2hSdWxlc0Rlc2MuY3JlYXRlRWwoXCJwXCIsIHtcclxuICAgIHRleHQ6IFwiQ2VzIHJcdTAwRThnbGVzIGluY2x1ZW50IDpcIixcclxuICB9KTtcclxuXHJcbiAgY29uc3QgcnVsZXNMaXN0ID0gZnJlbmNoUnVsZXNEZXNjLmNyZWF0ZUVsKFwidWxcIik7XHJcbiAgcnVsZXNMaXN0LnN0eWxlLm1hcmdpbkxlZnQgPSBcIjIwcHhcIjtcclxuICAvLyBydWxlc0xpc3Quc3R5bGUubWFyZ2luVG9wID0gXCI1cHhcIjtcclxuICBydWxlc0xpc3Quc3R5bGUubWFyZ2luQm90dG9tID0gXCIxNXB4XCI7XHJcblxyXG4gIHJ1bGVzTGlzdC5jcmVhdGVFbChcImxpXCIsIHtcclxuICAgIHRleHQ6ICdDb252ZXJzaW9uIGRlIChcIiBcIikgZW4gZ3VpbGxlbWV0cyBmcmFuXHUwMEU3YWlzIChcdTAwQUIgXHUwMEJCKScsXHJcbiAgfSk7XHJcbiAgcnVsZXNMaXN0LmNyZWF0ZUVsKFwibGlcIiwge1xyXG4gICAgdGV4dDogXCJFc3BhY2UgZmluZSBpbnNcdTAwRTljYWJsZSBhdmFudCBsZXMgcG9uY3R1YXRpb25zIGRvdWJsZXMgKCEgPyA7IFx1MDBCQilcIixcclxuICB9KTtcclxuICBydWxlc0xpc3QuY3JlYXRlRWwoXCJsaVwiLCB7XHJcbiAgICB0ZXh0OiBcIkVzcGFjZSBpbnNcdTAwRTljYWJsZSBhdmFudCBsZXMgZGV1eC1wb2ludHMgKDopXCIsXHJcbiAgfSk7XHJcbiAgcnVsZXNMaXN0LmNyZWF0ZUVsKFwibGlcIiwge1xyXG4gICAgdGV4dDogXCJFc3BhY2UgaW5zXHUwMEU5Y2FibGUgYXByXHUwMEU4cyBsZXMgbW90cyBkJ3VuZSBsZXR0cmUgKGEsIHksIFx1MDBFMC4uLilcIixcclxuICB9KTtcclxuICBydWxlc0xpc3QuY3JlYXRlRWwoXCJsaVwiLCB7XHJcbiAgICB0ZXh0OiBcIkVzcGFjZSBpbnNcdTAwRTljYWJsZSBkYW5zIGxlcyBub21zIGNvbXBvc1x1MDBFOXMgKEplYW4gRHVwb250KVwiLFxyXG4gIH0pO1xyXG4gIHJ1bGVzTGlzdC5jcmVhdGVFbChcImxpXCIsIHtcclxuICAgIHRleHQ6IFwiRXNwYWNlIGluc1x1MDBFOWNhYmxlIGF2YW50IGxlcyBpbml0aWFsZXMgKE0uIER1cG9udClcIixcclxuICB9KTtcclxuICBydWxlc0xpc3QuY3JlYXRlRWwoXCJsaVwiLCB7XHJcbiAgICB0ZXh0OiAnRXNwYWNlIGluc1x1MDBFOWNhYmxlIGF2YW50IFwic2lcdTAwRThjbGVcIiAoWFhlIHNpXHUwMEU4Y2xlKScsXHJcbiAgfSk7XHJcbiAgcnVsZXNMaXN0LmNyZWF0ZUVsKFwibGlcIiwge1xyXG4gICAgdGV4dDogJ0NvbnZlcnNpb24gZGVzIGxpZ2F0dXJlcyBcIm9lL09FXCIgZW4gXCJcdTAxNTMvXHUwMTUyXCInLFxyXG4gIH0pO1xyXG4gIHJ1bGVzTGlzdC5jcmVhdGVFbChcImxpXCIsIHtcclxuICAgIHRleHQ6IFwiRXhwb3NhbnRzIHBvdXIgbGVzIG9yZGluYXV4ICgxZXIsIFhJSWUpXCIsXHJcbiAgfSk7XHJcbiAgcnVsZXNMaXN0LmNyZWF0ZUVsKFwibGlcIiwge1xyXG4gICAgdGV4dDogXCJDb252ZXJzaW9uIGRlICguLi4pIGVuIHBvaW50cyBkZSBzdXNwZW5zaW9uIChcdTIwMjYpXCIsXHJcbiAgfSk7XHJcblxyXG4gIC8vIEFqb3V0ZXIgdW5lIG5vdGUgZXhwbGljYXRpdmUgc3VyIGxlcyBlc3BhY2VzIGZpbmVzIGluc1x1MDBFOWNhYmxlc1xyXG4gIGNvbnN0IG5vdGVFbCA9IGZyZW5jaFJ1bGVzRGVzY0NvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7XHJcbiAgICBjbHM6IFwic2V0dGluZy1pdGVtLWRlc2NyaXB0aW9uXCIsXHJcbiAgfSk7XHJcblxyXG4gIG5vdGVFbC5jcmVhdGVFbChcInBcIiwge1xyXG4gICAgdGV4dDogXCJTb3VyY2VzIDpcIixcclxuICB9KTtcclxuXHJcbiAgY29uc3QgaW5mb0xpc3QgPSBub3RlRWwuY3JlYXRlRWwoXCJ1bFwiKTtcclxuICBjb25zdCBpbmZvSXRlbSA9IGluZm9MaXN0LmNyZWF0ZUVsKFwibGlcIik7XHJcbiAgaW5mb0l0ZW0uY3JlYXRlRWwoXCJhXCIsIHtcclxuICAgIGhyZWY6IFwiaHR0cHM6Ly9naXRsYWIuY29tL0p1bGllQmxhbmMvdHlwZXNldHRpbmctdG9vbHMvLS9ibG9iL21hc3Rlci9yZWdleC10eXBvLmpzP3JlZl90eXBlPWhlYWRzXCIsXHJcbiAgICB0ZXh0OiBcInR5cGVzZXR0aW5nLXRvb2xzIChKdWxpZSBCbGFuYylcIixcclxuICB9KTtcclxuXHJcbiAgY29uc3QgaW5mb0l0ZW0yID0gaW5mb0xpc3QuY3JlYXRlRWwoXCJsaVwiKTtcclxuICBpbmZvSXRlbTIuY3JlYXRlRWwoXCJhXCIsIHtcclxuICAgIGhyZWY6IFwiaHR0cHM6Ly90eXBvbWFuaWUuZnIvdGFnL21pY3JvLXR5cG9ncmFwaGllL1wiLFxyXG4gICAgdGV4dDogXCJMZSBQZXRpdCBtYW51ZWwgZGUgY29tcG9zaXRpb24gdHlwb2dyYXBoaXF1ZS4gKE11cmllbCBQYXJpcylcIixcclxuICB9KTtcclxufVxyXG5cclxuICAvKipcclxuICAgKiBDclx1MDBFOWUgbGVzIHBhcmFtXHUwMEU4dHJlcyBkZSBtaXNlIGVuIFx1MDBFOXZpZGVuY2VcclxuICAgKiBAcGFyYW0gY29udGFpbmVyRWwgQ29udGVuZXVyIHBhcmVudFxyXG4gICAqL1xyXG4gIHByaXZhdGUgY3JlYXRlSGlnaGxpZ2h0U2V0dGluZ3MoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcbiAgICBjb25zdCBkZXNFbCA9IGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwicFwiLCB7XHJcbiAgICAgIHRleHQ6IFwiQWZmaWNoYWdlIGRlcyBjYXJhY3RcdTAwRThyZXMgaW52aXNpYmxlc1wiLFxyXG4gICAgfSk7XHJcbiAgICBkZXNFbC5zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCI7XHJcbiAgICBkZXNFbC5zdHlsZS5tYXJnaW5Ub3AgPSBcIjNlbVwiO1xyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZShcIkFjdGl2ZXIgbCdhZmZpY2hhZ2UgZGVzIGNhcmFjdFx1MDBFOHJlcyBpbnZpc2libGVzXCIpXHJcbiAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuICAgICAgICB0b2dnbGVcclxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5oaWdobGlnaHRFbmFibGVkKVxyXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5oaWdobGlnaHRFbmFibGVkID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgKTtcclxuXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoXCJCb3V0b24gZGFucyBsYSBiYXJyZSBkJ1x1MDBFOXRhdFwiKVxyXG4gICAgICAuc2V0RGVzYyhcclxuICAgICAgICBcIkFmZmljaGVyIHVuIGJvdXRvbiBkJ2FjdGl2YXRpb24vZFx1MDBFOXNhY3RpdmF0aW9uXCJcclxuICAgICAgKVxyXG4gICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcbiAgICAgICAgdG9nZ2xlXHJcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlnaGxpZ2h0QnV0dG9uKVxyXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5oaWdobGlnaHRCdXR0b24gPSB2YWx1ZTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICApO1xyXG5cclxuICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgIC5zZXROYW1lKFwiQm91dG9uIGRhbnMgbGEgYmFycmUgZGUgdGl0cmVcIilcclxuICAgICAgLnNldERlc2MoXHJcbiAgICAgICAgICBcIkFmZmljaGVyIHVuIGJvdXRvbiBkJ2FjdGl2YXRpb24vZFx1MDBFOXNhY3RpdmF0aW9uIGRhbnMgbGEgYmFycmUgZGUgdGl0cmUgZGVzIG9uZ2xldHNcIlxyXG4gICAgICApXHJcbiAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuICAgICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy50YWJUaXRsZUJhckJ1dHRvbilcclxuICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnRhYlRpdGxlQmFyQnV0dG9uID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICk7XHJcblxyXG5cclxuICB9XHJcbn1cclxuIiwgImltcG9ydCB7IEVkaXRvclZpZXcsIERlY29yYXRpb24sIFZpZXdQbHVnaW4sIFZpZXdVcGRhdGUgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivdmlld1wiO1xyXG5pbXBvcnQgeyBSYW5nZVNldEJ1aWxkZXIgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivc3RhdGVcIjtcclxuaW1wb3J0IHsgTWljcm90eXBvZ3JhcGhpZVNldHRpbmdzIH0gZnJvbSAnLi4vc2V0dGluZ3Mvc2V0dGluZ3MnO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDclx1MDBFOWUgbGVzIGRcdTAwRTljb3JhdGlvbnMgdmlzdWVsbGVzIHBvdXIgbGVzIGNhcmFjdFx1MDBFOHJlcyBzcFx1MDBFOWNpYXV4XHJcbiAqIEBwYXJhbSBzZXR0aW5ncyBQYXJhbVx1MDBFOHRyZXMgZHUgcGx1Z2luXHJcbiAqIEByZXR1cm5zIEV4dGVuc2lvbiBwb3VyIGwnXHUwMEU5ZGl0ZXVyIENvZGVNaXJyb3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWNvcmF0aW9ucyhzZXR0aW5nczogTWljcm90eXBvZ3JhcGhpZVNldHRpbmdzKSB7XHJcbiAgICAvLyBEXHUwMEU5Y29yYXRpb24gcG91ciBsJ2VzcGFjZSBpbnNcdTAwRTljYWJsZSBub3JtYWxlXHJcbiAgICBjb25zdCBub25CcmVha2luZ1NwYWNlRGVjb3JhdGlvbiA9IERlY29yYXRpb24ubWFyayh7XHJcbiAgICAgICAgY2xhc3M6ICdub25CcmVha2luZ1NwYWNlJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRFx1MDBFOWNvcmF0aW9uIHBvdXIgbCdlc3BhY2UgZmluZSBpbnNcdTAwRTljYWJsZVxyXG4gICAgY29uc3QgdGhpblNwYWNlRGVjb3JhdGlvbiA9IERlY29yYXRpb24ubWFyayh7XHJcbiAgICAgICAgY2xhc3M6ICd0aGluU3BhY2UnXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBEXHUwMEU5Y29yYXRpb24gcG91ciBsZSB0aXJldCBjYWRyYXRpblxyXG4gICAgY29uc3QgZW1EYXNoRGVjb3JhdGlvbiA9IERlY29yYXRpb24ubWFyayh7XHJcbiAgICAgICAgY2xhc3M6ICdlbS1kYXNoJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRFx1MDBFOWNvcmF0aW9uIHBvdXIgbCdlc3BhY2Ugbm9ybWFsZVxyXG4gICAgY29uc3QgcmVndWxhclNwYWNlRGVjb3JhdGlvbiA9IERlY29yYXRpb24ubWFyayh7XHJcbiAgICAgICAgY2xhc3M6ICdyZWd1bGFyU3BhY2UnXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gVmlld1BsdWdpbi5mcm9tQ2xhc3MoY2xhc3Mge1xyXG4gICAgICAgIGRlY29yYXRpb25zOiBhbnk7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHZpZXc6IEVkaXRvclZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy5kZWNvcmF0aW9ucyA9IHRoaXMuYnVpbGREZWNvcmF0aW9ucyh2aWV3KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHVwZGF0ZSh1cGRhdGU6IFZpZXdVcGRhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZS5kb2NDaGFuZ2VkIHx8IHVwZGF0ZS52aWV3cG9ydENoYW5nZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGlvbnMgPSB0aGlzLmJ1aWxkRGVjb3JhdGlvbnModXBkYXRlLnZpZXcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBidWlsZERlY29yYXRpb25zKHZpZXc6IEVkaXRvclZpZXcpIHtcclxuICAgICAgICAgICAgY29uc3QgYnVpbGRlciA9IG5ldyBSYW5nZVNldEJ1aWxkZXI8RGVjb3JhdGlvbj4oKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIEFwcGxpcXVlciBsZXMgZFx1MDBFOWNvcmF0aW9ucyB1bmlxdWVtZW50IHNpIGxhIG1pc2UgZW4gXHUwMEU5dmlkZW5jZSBlc3QgYWN0aXZcdTAwRTllXHJcbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5oaWdobGlnaHRFbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB7IGZyb20sIHRvIH0gb2Ygdmlldy52aXNpYmxlUmFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSB2aWV3LnN0YXRlLmRvYy5zbGljZVN0cmluZyhmcm9tLCB0byk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRvY3VtZW50VGV4dCA9IHZpZXcuc3RhdGUuZG9jLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUG9zaXRpb24gZGUgZFx1MDBFOXBhcnQgcG91ciBsZSB0cmFpdGVtZW50IGR1IHRleHRlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0UG9zID0gZnJvbTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBBbmFseXNlciBsZSB0ZXh0ZSBwb3VyIGRcdTAwRTl0ZWN0ZXIgbGVzIGZyb250bWF0dGVyIGV0IGJsb2NzIGRlIGNvZGVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5Gcm9udG1hdHRlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbkNvZGVCbG9jayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsaW5lU3RhcnQgPSB0cnVlOyAvLyBQb3VyIGRcdTAwRTl0ZWN0ZXIgbGUgZFx1MDBFOWJ1dCBkJ3VuZSBsaWduZVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyID0gdGV4dFtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9zID0gc3RhcnRQb3MgKyBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT2J0ZW5pciBsYSBwb3NpdGlvbiBkZSBsaWduZSBhY3R1ZWxsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50UG9zID0gdmlldy5zdGF0ZS5kb2MubGluZUF0KHBvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVOdW1iZXIgPSBjdXJyZW50UG9zLm51bWJlciAtIDE7IC8vIExlcyBsaWduZXMgY29tbWVuY2VudCBcdTAwRTAgMSBkYW5zIENvZGVNaXJyb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERcdTAwRTl0ZWN0aW9uIGR1IGRcdTAwRTlidXQgZXQgZmluIGR1IGZyb250bWF0dGVyICgtLS0pIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZVN0YXJ0ICYmIHRleHQuc3Vic3RyKGksIDMpID09PSAnLS0tJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5Gcm9udG1hdHRlciA9ICFpbkZyb250bWF0dGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAyOyAvLyBTYXV0ZXIgbGVzIDMgdGlyZXRzIChvbiBpbmNyXHUwMEU5bWVudGVyYSBlbmNvcmUgaSBkYW5zIGxhIGJvdWNsZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTdGFydCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERcdTAwRTl0ZWN0aW9uIGR1IGRcdTAwRTlidXQgZXQgZmluIGRlcyBibG9jcyBkZSBjb2RlIChgYGApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaW5lU3RhcnQgJiYgdGV4dC5zdWJzdHIoaSwgMykgPT09ICdgYGAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbkNvZGVCbG9jayA9ICFpbkNvZGVCbG9jaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMjsgLy8gU2F1dGVyIGxlcyAzIGJhY2t0aWNrc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVN0YXJ0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRFx1MDBFOXRlY3Rpb24gZHUgZFx1MDBFOWJ1dCBkJ3VuZSBub3V2ZWxsZSBsaWduZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gJ1xcbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTdGFydCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGluZVN0YXJ0ICYmIGNoYXIgIT09ICcgJyAmJiBjaGFyICE9PSAnXFx0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVN0YXJ0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZcdTAwRTlyaWZpZXIgc2kgbGEgbGlnbmUgYWN0dWVsbGUgZXN0IGRhbnMgdW4gYmxvYyBzcFx1MDBFOWNpYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNJblNwZWNpYWxCbG9jayA9IGluRnJvbnRtYXR0ZXIgfHwgaW5Db2RlQmxvY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBsaXF1ZXIgbGVzIGRcdTAwRTljb3JhdGlvbnMgc2V1bGVtZW50IHNpIG9uIG4nZXN0IHBhcyBkYW5zIHVuIGJsb2Mgc3BcdTAwRTljaWFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNJblNwZWNpYWxCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09ICdcXHUwMEEwJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkKHBvcywgcG9zICsgMSwgbm9uQnJlYWtpbmdTcGFjZURlY29yYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09ICdcXHUyMDJGJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkKHBvcywgcG9zICsgMSwgdGhpblNwYWNlRGVjb3JhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gJ1x1MjAxNCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyLmFkZChwb3MsIHBvcyArIDEsIGVtRGFzaERlY29yYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09ICcgJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkKHBvcywgcG9zICsgMSwgcmVndWxhclNwYWNlRGVjb3JhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyLmZpbmlzaCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXHJcbiAgICB9LCB7XHJcbiAgICAgICAgZGVjb3JhdGlvbnM6IHYgPT4gdi5kZWNvcmF0aW9uc1xyXG4gICAgfSk7XHJcbn0iLCAiaW1wb3J0IHsgUGx1Z2luLCBzZXRJY29uIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIENyXHUwMEU5ZSB1biBib3V0b24gZGFucyBsYSBiYXJyZSBkJ1x1MDBFOXRhdFxyXG4gKiBAcGFyYW0gcGx1Z2luIEluc3RhbmNlIGR1IHBsdWdpblxyXG4gKiBAcGFyYW0gaXNFbmFibGVkIFx1MDBDOXRhdCBpbml0aWFsIChhY3Rpdlx1MDBFOS9kXHUwMEU5c2FjdGl2XHUwMEU5KVxyXG4gKiBAcGFyYW0gdG9nZ2xlQ2FsbGJhY2sgRm9uY3Rpb24gZGUgcmFwcGVsIHBvdXIgbGUgYmFzY3VsZW1lbnRcclxuICogQHJldHVybnMgXHUwMEM5bFx1MDBFOW1lbnQgSFRNTCBkdSBib3V0b25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdGF0dXNCYXJCdXR0b24oXHJcbiAgICBwbHVnaW46IFBsdWdpbixcclxuICAgIGlzRW5hYmxlZDogYm9vbGVhbixcclxuICAgIHRvZ2dsZUNhbGxiYWNrOiAoKSA9PiB2b2lkXHJcbik6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHN0YXR1c0Jhckl0ZW1FbCA9IHBsdWdpbi5hZGRTdGF0dXNCYXJJdGVtKCk7XHJcbiAgICBzdGF0dXNCYXJJdGVtRWwuaWQgPSBcImhpZ2hsaWdodC1zdGF0dXMtYmFyLWJ1dHRvblwiO1xyXG4gICAgXHJcbiAgICBzdGF0dXNCYXJJdGVtRWwuYWRkQ2xhc3MoXCJtb2QtY2xpY2thYmxlXCIpO1xyXG4gICAgXHJcbiAgICAvLyBDclx1MDBFOWVyIGwnaWNcdTAwRjRuZSBldCBsJ2Fqb3V0ZXIgYXUgYm91dG9uXHJcbiAgICBzZXRJY29uKHN0YXR1c0Jhckl0ZW1FbCwgXCJwaWxjcm93XCIpO1xyXG5cclxuICAgIHN0YXR1c0Jhckl0ZW1FbC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIFwiQWZmaWNoZXIvTWFzcXVlciBsZXMgY2FyYWN0XHUwMEU4cmVzIGludmlzaWJsZXNcIik7XHJcbiAgICBzdGF0dXNCYXJJdGVtRWwuc2V0QXR0cmlidXRlKFwiZGF0YS10b29sdGlwLXBvc2l0aW9uXCIsIFwidG9wXCIpO1xyXG5cclxuICAgIC8vIERcdTAwRTlmaW5pciBsJ2FwcGFyZW5jZSBpbml0aWFsZVxyXG4gICAgdXBkYXRlU3RhdHVzQmFyQnV0dG9uKHN0YXR1c0Jhckl0ZW1FbCwgaXNFbmFibGVkKTtcclxuXHJcbiAgICAvLyBBam91dGVyIGwnXHUwMEU5dlx1MDBFOW5lbWVudCBkZSBjbGljXHJcbiAgICBzdGF0dXNCYXJJdGVtRWwub25DbGlja0V2ZW50KCgpID0+IHtcclxuICAgICAgICB0b2dnbGVDYWxsYmFjaygpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHJldHVybiBzdGF0dXNCYXJJdGVtRWw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDclx1MDBFOWUgdW4gYm91dG9uIGRhbnMgbGEgYmFycmUgZGUgdGl0cmUgZGVzIG9uZ2xldHNcclxuICogQHBhcmFtIHBsdWdpbiBJbnN0YW5jZSBkdSBwbHVnaW5cclxuICogQHBhcmFtIGlzRW5hYmxlZCBcdTAwQzl0YXQgaW5pdGlhbCAoYWN0aXZcdTAwRTkvZFx1MDBFOXNhY3Rpdlx1MDBFOSlcclxuICogQHBhcmFtIHRvZ2dsZUNhbGxiYWNrIEZvbmN0aW9uIGRlIHJhcHBlbCBwb3VyIGxlIGJhc2N1bGVtZW50XHJcbiAqIEByZXR1cm5zIFx1MDBDOWxcdTAwRTltZW50IEhUTUwgZHUgYm91dG9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGFiVGl0bGVCYXJCdXR0b24oXHJcbiAgICBwbHVnaW46IFBsdWdpbixcclxuICAgIGlzRW5hYmxlZDogYm9vbGVhbixcclxuICAgIHRvZ2dsZUNhbGxiYWNrOiAoKSA9PiB2b2lkXHJcbik6IEhUTUxFbGVtZW50IHtcclxuICAgIC8vIENyXHUwMEU5ZXIgbGUgYm91dG9uXHJcbiAgICBjb25zdCBidXR0b25FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgYnV0dG9uRWwuaWQgPSBcImhpZ2hsaWdodC10YWItdGl0bGUtYnV0dG9uXCI7XHJcbiAgICBidXR0b25FbC5jbGFzc05hbWUgPSBcImNsaWNrYWJsZS1pY29uIHZpZXctYWN0aW9uXCI7XHJcbiAgICBidXR0b25FbC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIFwiQWZmaWNoZXIvTWFzcXVlciBsZXMgY2FyYWN0XHUwMEU4cmVzIGludmlzaWJsZXNcIik7XHJcbiAgICBcclxuICAgIC8vIENyXHUwMEU5ZXIgbCdpY1x1MDBGNG5lIGV0IGwnYWpvdXRlciBhdSBib3V0b25cclxuICAgIHNldEljb24oYnV0dG9uRWwsIFwicGlsY3Jvd1wiKTtcclxuICAgIFxyXG4gICAgLy8gRFx1MDBFOWZpbmlyIGwnYXBwYXJlbmNlIGluaXRpYWxlXHJcbiAgICB1cGRhdGVUYWJUaXRsZUJhckJ1dHRvbihidXR0b25FbCwgaXNFbmFibGVkKTtcclxuICAgIFxyXG4gICAgLy8gQWpvdXRlciBsJ1x1MDBFOXZcdTAwRTluZW1lbnQgZGUgY2xpY1xyXG4gICAgYnV0dG9uRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRvZ2dsZUNhbGxiYWNrKCk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8gQWpvdXRlciBsZSBib3V0b24gXHUwMEUwIGxhIGJhcnJlIGRlIHRpdHJlXHJcbiAgICBjb25zdCB0aXRsZUJhckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZpZXctaGVhZGVyLXRpdGxlLWNvbnRhaW5lcicpO1xyXG4gICAgaWYgKHRpdGxlQmFyRWwpIHtcclxuICAgICAgICBjb25zdCBhY3Rpb25zRWwgPSB0aXRsZUJhckVsLm5leHRFbGVtZW50U2libGluZyBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBpZiAoYWN0aW9uc0VsICYmIGFjdGlvbnNFbC5jbGFzc0xpc3QuY29udGFpbnMoJ3ZpZXctYWN0aW9ucycpKSB7XHJcbiAgICAgICAgICAgIGFjdGlvbnNFbC5wcmVwZW5kKGJ1dHRvbkVsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBidXR0b25FbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1ldCBcdTAwRTAgam91ciBsJ2FwcGFyZW5jZSBkdSBib3V0b24gZGUgbGEgYmFycmUgZCdcdTAwRTl0YXRcclxuICogQHBhcmFtIGJ1dHRvbkVsIFx1MDBDOWxcdTAwRTltZW50IEhUTUwgZHUgYm91dG9uXHJcbiAqIEBwYXJhbSBpc0VuYWJsZWQgXHUwMEM5dGF0IChhY3Rpdlx1MDBFOS9kXHUwMEU5c2FjdGl2XHUwMEU5KVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1c0JhckJ1dHRvbihidXR0b25FbDogSFRNTEVsZW1lbnQgfCBudWxsLCBpc0VuYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIGlmICghYnV0dG9uRWwpIHJldHVybjtcclxuICAgIFxyXG4gICAgaWYgKGlzRW5hYmxlZCkge1xyXG4gICAgICAgIGJ1dHRvbkVsLmFkZENsYXNzKCdoaWdobGlnaHQtZW5hYmxlZCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBidXR0b25FbC5yZW1vdmVDbGFzcygnaGlnaGxpZ2h0LWVuYWJsZWQnKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIE1ldCBcdTAwRTAgam91ciBsJ2FwcGFyZW5jZSBkdSBib3V0b24gZGUgbGEgYmFycmUgZGUgdGl0cmVcclxuICogQHBhcmFtIGJ1dHRvbkVsIFx1MDBDOWxcdTAwRTltZW50IEhUTUwgZHUgYm91dG9uXHJcbiAqIEBwYXJhbSBpc0VuYWJsZWQgXHUwMEM5dGF0IChhY3Rpdlx1MDBFOS9kXHUwMEU5c2FjdGl2XHUwMEU5KVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVRhYlRpdGxlQmFyQnV0dG9uKGJ1dHRvbkVsOiBIVE1MRWxlbWVudCB8IG51bGwsIGlzRW5hYmxlZDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgaWYgKCFidXR0b25FbCkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICBpZiAoaXNFbmFibGVkKSB7XHJcbiAgICAgICAgYnV0dG9uRWwuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBidXR0b25FbC5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdXBwcmltZSBsZSBib3V0b24gZGUgbGEgYmFycmUgZCdcdTAwRTl0YXRcclxuICogQHBhcmFtIGJ1dHRvbkVsIFx1MDBDOWxcdTAwRTltZW50IEhUTUwgZHUgYm91dG9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlU3RhdHVzQmFyQnV0dG9uKGJ1dHRvbkVsOiBIVE1MRWxlbWVudCB8IG51bGwpOiB2b2lkIHtcclxuICAgIGlmIChidXR0b25FbCkge1xyXG4gICAgICAgIGJ1dHRvbkVsLnJlbW92ZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogU3VwcHJpbWUgbGUgYm91dG9uIGRlIGxhIGJhcnJlIGRlIHRpdHJlXHJcbiAqIEBwYXJhbSBidXR0b25FbCBcdTAwQzlsXHUwMEU5bWVudCBIVE1MIGR1IGJvdXRvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVRhYlRpdGxlQmFyQnV0dG9uKGJ1dHRvbkVsOiBIVE1MRWxlbWVudCB8IG51bGwpOiB2b2lkIHtcclxuICAgIGlmIChidXR0b25FbCkge1xyXG4gICAgICAgIGJ1dHRvbkVsLnJlbW92ZSgpO1xyXG4gICAgfVxyXG59IiwgIi8qKlxyXG4gKiBJbnRlcmZhY2UgcG91ciBsZXMgcG9zaXRpb25zIGRhbnMgbCdcdTAwRTlkaXRldXJcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRWRpdG9yUG9zaXRpb24ge1xyXG4gICAgbGluZTogbnVtYmVyO1xyXG4gICAgY2g6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEludGVyZmFjZSBwb3VyIGxlIHJcdTAwRTlzdWx0YXQgZGUgbCdhbmFseXNlIGRlcyBibG9jc1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBCbG9ja0FuYWx5c2lzUmVzdWx0IHtcclxuICAgIGxpbmVUeXBlczogc3RyaW5nW107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbmFseXNlIGxhIHN0cnVjdHVyZSBkdSBkb2N1bWVudCBwb3VyIGlkZW50aWZpZXIgbGVzIGJsb2NzIHNwXHUwMEU5Y2lhdXhcclxuICogQHBhcmFtIGRvY3VtZW50VGV4dCBUZXh0ZSBjb21wbGV0IGR1IGRvY3VtZW50XHJcbiAqIEBwYXJhbSBzdGFydExpbmUgTGlnbmUgZGUgZFx1MDBFOWJ1dCBkZSBsYSBzXHUwMEU5bGVjdGlvblxyXG4gKiBAcGFyYW0gZW5kTGluZSBMaWduZSBkZSBmaW4gZGUgbGEgc1x1MDBFOWxlY3Rpb25cclxuICogQHJldHVybnMgUlx1MDBFOXN1bHRhdCBkZSBsJ2FuYWx5c2UgYXZlYyB0eXBlcyBkZSBsaWduZXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhbmFseXplRG9jdW1lbnRTdHJ1Y3R1cmUoZG9jdW1lbnRUZXh0OiBzdHJpbmcsIHN0YXJ0TGluZTogbnVtYmVyLCBlbmRMaW5lOiBudW1iZXIpOiBCbG9ja0FuYWx5c2lzUmVzdWx0IHtcclxuICAgIGNvbnN0IGxpbmVzID0gZG9jdW1lbnRUZXh0LnNwbGl0KCdcXG4nKTtcclxuICAgIGNvbnN0IGxpbmVUeXBlcyA9IG5ldyBBcnJheShlbmRMaW5lIC0gc3RhcnRMaW5lICsgMSkuZmlsbCgnbm9ybWFsJyk7XHJcbiAgICBcclxuICAgIGxldCBpbkZyb250bWF0dGVyID0gZmFsc2U7XHJcbiAgICBsZXQgaW5Db2RlQmxvY2sgPSBmYWxzZTtcclxuICAgIFxyXG4gICAgLy8gVW5lIHNldWxlIHBhc3NlIHBvdXIgYW5hbHlzZXIgdG91dCBsZSBkb2N1bWVudFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGxpbmUgPSBsaW5lc1tpXTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAobGluZS50cmltKCkgPT09ICctLS0nKSB7XHJcbiAgICAgICAgICAgIGluRnJvbnRtYXR0ZXIgPSAhaW5Gcm9udG1hdHRlcjtcclxuICAgICAgICB9IGVsc2UgaWYgKGxpbmUudHJpbSgpLnN0YXJ0c1dpdGgoJ2BgYCcpKSB7XHJcbiAgICAgICAgICAgIGluQ29kZUJsb2NrID0gIWluQ29kZUJsb2NrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBTaSBub3VzIHNvbW1lcyBkYW5zIGwnaW50ZXJ2YWxsZSBkZSBzXHUwMEU5bGVjdGlvbiwgZW5yZWdpc3RyZXIgbGUgdHlwZVxyXG4gICAgICAgIGlmIChpID49IHN0YXJ0TGluZSAmJiBpIDw9IGVuZExpbmUpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVJbmRleCA9IGkgLSBzdGFydExpbmU7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAobGluZS50cmltKCkgPT09ICctLS0nIHx8IGxpbmUudHJpbSgpLnN0YXJ0c1dpdGgoJ2BgYCcpKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lVHlwZXNbcmVsYXRpdmVJbmRleF0gPSAnZGVsaW1pdGVyJztcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbkZyb250bWF0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lVHlwZXNbcmVsYXRpdmVJbmRleF0gPSAnZnJvbnRtYXR0ZXInO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGluQ29kZUJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lVHlwZXNbcmVsYXRpdmVJbmRleF0gPSAnY29kZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gU2kgbm91cyBhdm9ucyBkXHUwMEU5cGFzc1x1MDBFOSBsJ2ludGVydmFsbGUsIG5vdXMgcG91dm9ucyBzb3J0aXJcclxuICAgICAgICBpZiAoaSA+IGVuZExpbmUpIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4geyBsaW5lVHlwZXMgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFZcdTAwRTlyaWZpZSBzaSB1bmUgbGlnbmUgc3BcdTAwRTljaWZpcXVlIHNlIHRyb3V2ZSBkYW5zIHVuIGJsb2Mgc3BcdTAwRTljaWFsXHJcbiAqIEBwYXJhbSBkb2N1bWVudFRleHQgVGV4dGUgY29tcGxldCBkdSBkb2N1bWVudFxyXG4gKiBAcGFyYW0gbGluZU51bWJlciBOdW1cdTAwRTlybyBkZSBsaWduZSBcdTAwRTAgdlx1MDBFOXJpZmllclxyXG4gKiBAcmV0dXJucyB0cnVlIHNpIGxhIGxpZ25lIGVzdCBkYW5zIHVuIGJsb2Mgc3BcdTAwRTljaWFsXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNMaW5lSW5TcGVjaWFsQmxvY2soZG9jdW1lbnRUZXh0OiBzdHJpbmcsIGxpbmVOdW1iZXI6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgbGluZXMgPSBkb2N1bWVudFRleHQuc3BsaXQoJ1xcbicpO1xyXG4gICAgXHJcbiAgICBsZXQgaW5Gcm9udG1hdHRlciA9IGZhbHNlO1xyXG4gICAgbGV0IGluQ29kZUJsb2NrID0gZmFsc2U7XHJcbiAgICBcclxuICAgIC8vIEFuYWx5c2VyIGxlIGRvY3VtZW50IGp1c3F1J1x1MDBFMCBsYSBsaWduZSBzcFx1MDBFOWNpZmlcdTAwRTllXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBsaW5lTnVtYmVyOyBpKyspIHtcclxuICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbaV07XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGxpbmUudHJpbSgpID09PSAnLS0tJykge1xyXG4gICAgICAgICAgICBpbkZyb250bWF0dGVyID0gIWluRnJvbnRtYXR0ZXI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChsaW5lLnRyaW0oKS5zdGFydHNXaXRoKCdgYGAnKSkge1xyXG4gICAgICAgICAgICBpbkNvZGVCbG9jayA9ICFpbkNvZGVCbG9jaztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gU2kgbm91cyBzb21tZXMgXHUwMEUwIGxhIGxpZ25lIGNpYmxlLCByZXRvdXJuZXIgbGUgclx1MDBFOXN1bHRhdFxyXG4gICAgICAgIGlmIChpID09PSBsaW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbkZyb250bWF0dGVyIHx8IGluQ29kZUJsb2NrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG4vKipcclxuICogQW5hbHlzZSByYXBpZGUgcG91ciBkXHUwMEU5dGVjdGVyIGxlIHR5cGUgZGUgYmxvYyBkJ3VuZSBsaWduZVxyXG4gKiBAcGFyYW0gZG9jdW1lbnRUZXh0IFRleHRlIGR1IGRvY3VtZW50XHJcbiAqIEBwYXJhbSBsaW5lTnVtYmVyIE51bVx1MDBFOXJvIGRlIGxpZ25lXHJcbiAqIEByZXR1cm5zIFR5cGUgZGUgYmxvYzogJ25vcm1hbCcsICdmcm9udG1hdHRlcicsICdjb2RlJywgJ2RlbGltaXRlcidcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaW5lQmxvY2tUeXBlKGRvY3VtZW50VGV4dDogc3RyaW5nLCBsaW5lTnVtYmVyOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgbGluZXMgPSBkb2N1bWVudFRleHQuc3BsaXQoJ1xcbicpO1xyXG4gICAgY29uc3QgbGluZSA9IGxpbmVzW2xpbmVOdW1iZXJdO1xyXG4gICAgXHJcbiAgICAvLyBWXHUwMEU5cmlmaWVyIHNpIGMnZXN0IHVuIGRcdTAwRTlsaW1pdGV1clxyXG4gICAgaWYgKGxpbmUudHJpbSgpID09PSAnLS0tJyB8fCBsaW5lLnRyaW0oKS5zdGFydHNXaXRoKCdgYGAnKSkge1xyXG4gICAgICAgIHJldHVybiAnZGVsaW1pdGVyJztcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gVlx1MDBFOXJpZmllciBzaSBsYSBsaWduZSBlc3QgZGFucyB1biBibG9jIHNwXHUwMEU5Y2lhbFxyXG4gICAgaWYgKGlzTGluZUluU3BlY2lhbEJsb2NrKGRvY3VtZW50VGV4dCwgbGluZU51bWJlcikpIHtcclxuICAgICAgICAvLyBEXHUwMEU5dGVybWluZXIgbGUgdHlwZSBkZSBibG9jIHNwXHUwMEU5Y2lhbFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGFuYWx5emVEb2N1bWVudFN0cnVjdHVyZShkb2N1bWVudFRleHQsIGxpbmVOdW1iZXIsIGxpbmVOdW1iZXIpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQubGluZVR5cGVzWzBdO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gJ25vcm1hbCc7XHJcbn0iLCAiaW1wb3J0IHsgUGx1Z2luLCBFZGl0b3IgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgaXNMaW5lSW5TcGVjaWFsQmxvY2sgfSBmcm9tIFwiLi4vY29yZS9ibG9ja0FuYWx5emVyXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIFZcdTAwRTlyaWZpZSBzaSBsZSBjdXJzZXVyIGVzdCBkYW5zIHVuIGJsb2Mgc3BcdTAwRTljaWFsIChmcm9udG1hdHRlciBvdSBjb2RlKVxyXG4gKiBAcGFyYW0gZWRpdG9yIFx1MDBDOWRpdGV1ciBPYnNpZGlhblxyXG4gKiBAcmV0dXJucyB0cnVlIHNpIGxlIGN1cnNldXIgZXN0IGRhbnMgdW4gYmxvYyBzcFx1MDBFOWNpYWxcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0luU3BlY2lhbEJsb2NrKGVkaXRvcjogRWRpdG9yKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcbiAgICBjb25zdCB0ZXh0ID0gZWRpdG9yLmdldFZhbHVlKCk7XHJcbiAgICBcclxuICAgIHJldHVybiBpc0xpbmVJblNwZWNpYWxCbG9jayh0ZXh0LCBjdXJzb3IubGluZSk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVlx1MDBFOXJpZmllIHNpIGxlIGN1cnNldXIgZXN0IGRhbnMgdW4gXHUwMEU5bFx1MDBFOW1lbnQgTWFya2Rvd24gc3BcdTAwRTljaWFsIFx1MDBFMCBwclx1MDBFOXNlcnZlclxyXG4gKiBAcGFyYW0gZWRpdG9yIFx1MDBDOWRpdGV1ciBPYnNpZGlhblxyXG4gKiBAcmV0dXJucyB0cnVlIHNpIGxlIGN1cnNldXIgZXN0IGRhbnMgdW4gXHUwMEU5bFx1MDBFOW1lbnQgXHUwMEUwIHByXHUwMEU5c2VydmVyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNJblByZXNlcnZlZE1hcmtkb3duKGVkaXRvcjogRWRpdG9yKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcbiAgICBjb25zdCBsaW5lID0gZWRpdG9yLmdldExpbmUoY3Vyc29yLmxpbmUpO1xyXG4gICAgXHJcbiAgICAvLyAxLiBWXHUwMEU5cmlmaWVyIHNpIG9uIGVzdCBkYW5zIHVuIGNvZGUgaW5saW5lIChlbnRyZSBiYWNrdGlja3MpXHJcbiAgICBjb25zdCBjb2RlSW5saW5lUGF0dGVybiA9IC9gW15gXSpgL2c7XHJcbiAgICBjb25zdCBjb2RlSW5saW5lTWF0Y2hlcyA9IFsuLi5saW5lLm1hdGNoQWxsKGNvZGVJbmxpbmVQYXR0ZXJuKV07XHJcbiAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIGNvZGVJbmxpbmVNYXRjaGVzKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBtYXRjaC5pbmRleCB8fCAwO1xyXG4gICAgICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgbWF0Y2hbMF0ubGVuZ3RoO1xyXG4gICAgICAgIGlmIChjdXJzb3IuY2ggPj0gc3RhcnQgJiYgY3Vyc29yLmNoIDw9IGVuZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIDIuIFZcdTAwRTlyaWZpZXIgc2kgb24gZXN0IGRhbnMgdW4gbGllbiBpbnRlcm5lIE9ic2lkaWFuXHJcbiAgICBjb25zdCBvYnNpZGlhbkxpbmtQYXR0ZXJuID0gL1xcW1xcW1teXFxdXSpcXF1cXF0vZztcclxuICAgIGNvbnN0IG9ic2lkaWFuTGlua01hdGNoZXMgPSBbLi4ubGluZS5tYXRjaEFsbChvYnNpZGlhbkxpbmtQYXR0ZXJuKV07XHJcbiAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIG9ic2lkaWFuTGlua01hdGNoZXMpIHtcclxuICAgICAgICBjb25zdCBzdGFydCA9IG1hdGNoLmluZGV4IHx8IDA7XHJcbiAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBtYXRjaFswXS5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGN1cnNvci5jaCA+PSBzdGFydCAmJiBjdXJzb3IuY2ggPD0gZW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gMy4gVlx1MDBFOXJpZmllciBzaSBvbiBlc3QgZGFucyB1bmUgXHUwMEU5cXVhdGlvbiBtYXRoXHUwMEU5bWF0aXF1ZSBpbmxpbmVcclxuICAgIGNvbnN0IG1hdGhJbmxpbmVQYXR0ZXJuID0gL1xcJFteJF0qXFwkL2c7XHJcbiAgICBjb25zdCBtYXRoSW5saW5lTWF0Y2hlcyA9IFsuLi5saW5lLm1hdGNoQWxsKG1hdGhJbmxpbmVQYXR0ZXJuKV07XHJcbiAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIG1hdGhJbmxpbmVNYXRjaGVzKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBtYXRjaC5pbmRleCB8fCAwO1xyXG4gICAgICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgbWF0Y2hbMF0ubGVuZ3RoO1xyXG4gICAgICAgIGlmIChjdXJzb3IuY2ggPj0gc3RhcnQgJiYgY3Vyc29yLmNoIDw9IGVuZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIDQuIFZcdTAwRTlyaWZpZXIgc2kgb24gZXN0IGRhbnMgdW5lIFx1MDBFOXF1YXRpb24gbWF0aFx1MDBFOW1hdGlxdWUgYmxvY1xyXG4gICAgLy8gT24gbmUgdlx1MDBFOXJpZmllIHF1ZSBsZSBkXHUwMEU5YnV0IGV0IGxhIGZpbiBjYXIgbGUgYmxvYyBwZXV0IHMnXHUwMEU5dGVuZHJlIHN1ciBwbHVzaWV1cnMgbGlnbmVzXHJcbiAgICBpZiAobGluZS5pbmNsdWRlcyhcIiQkXCIpKSB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IFsuLi5saW5lLm1hdGNoQWxsKC9cXCRcXCQvZyldO1xyXG4gICAgICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgbWF0Y2hlcykge1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IG1hdGNoLmluZGV4IHx8IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgMjtcclxuICAgICAgICAgICAgaWYgKGN1cnNvci5jaCA+PSBzdGFydCAmJiBjdXJzb3IuY2ggPD0gZW5kKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gNS4gVlx1MDBFOXJpZmllciBzaSBvbiBlc3QgZGFucyB1biBjYWxsb3V0XHJcbiAgICBjb25zdCBjYWxsb3V0UGF0dGVybiA9IC9ePlxccytcXFshLipcXF0vO1xyXG4gICAgaWYgKGNhbGxvdXRQYXR0ZXJuLnRlc3QobGluZSkgJiYgY3Vyc29yLmNoIDw9IGxpbmUubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIDYuIFZcdTAwRTlyaWZpZXIgc2kgb24gZXN0IGRhbnMgdW5lIFVSTCBkaXJlY3RlXHJcbiAgICBjb25zdCB1cmxQYXR0ZXJuID0gLyhodHRwcz86XFwvXFwvfHd3d1xcLilbXlxcc10rL2c7XHJcbiAgICBjb25zdCB1cmxNYXRjaGVzID0gWy4uLmxpbmUubWF0Y2hBbGwodXJsUGF0dGVybildO1xyXG4gICAgZm9yIChjb25zdCBtYXRjaCBvZiB1cmxNYXRjaGVzKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBtYXRjaC5pbmRleCB8fCAwO1xyXG4gICAgICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgbWF0Y2hbMF0ubGVuZ3RoO1xyXG4gICAgICAgIGlmIChjdXJzb3IuY2ggPj0gc3RhcnQgJiYgY3Vyc29yLmNoIDw9IGVuZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIDcuIFBvdXIgbGVzIGltYWdlcyBldCBsaWVucywgdlx1MDBFOXJpZmllciBzaSBsZSBjdXJzZXVyIGVzdCBcdTAwRTAgbCdpbnRcdTAwRTlyaWV1clxyXG4gICAgY29uc3QgaW1hZ2VQYXR0ZXJuID0gLyFcXFsuKj9cXF1cXCguKj9cXCkvZztcclxuICAgIGNvbnN0IGltYWdlTWF0Y2hlcyA9IFsuLi5saW5lLm1hdGNoQWxsKGltYWdlUGF0dGVybildO1xyXG4gICAgZm9yIChjb25zdCBtYXRjaCBvZiBpbWFnZU1hdGNoZXMpIHtcclxuICAgICAgICBjb25zdCBzdGFydCA9IG1hdGNoLmluZGV4IHx8IDA7XHJcbiAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBtYXRjaFswXS5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGN1cnNvci5jaCA+PSBzdGFydCAmJiBjdXJzb3IuY2ggPD0gZW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gOC4gUG91ciBsZXMgbGllbnMgTWFya2Rvd25cclxuICAgIGNvbnN0IGxpbmtQYXR0ZXJuID0gL1xcWy4qP1xcXVxcKC4qP1xcKS9nO1xyXG4gICAgY29uc3QgbGlua01hdGNoZXMgPSBbLi4ubGluZS5tYXRjaEFsbChsaW5rUGF0dGVybildO1xyXG4gICAgZm9yIChjb25zdCBtYXRjaCBvZiBsaW5rTWF0Y2hlcykge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gbWF0Y2guaW5kZXggfHwgMDtcclxuICAgICAgICBjb25zdCBlbmQgPSBzdGFydCArIG1hdGNoWzBdLmxlbmd0aDtcclxuICAgICAgICBpZiAoY3Vyc29yLmNoID49IHN0YXJ0ICYmIGN1cnNvci5jaCA8PSBlbmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyA5LiBQb3VyIGxlcyBiYWxpc2VzIEhUTUxcclxuICAgIGNvbnN0IGh0bWxUYWdQYXR0ZXJuID0gLzxbXj5dKj4vZztcclxuICAgIGNvbnN0IGh0bWxNYXRjaGVzID0gWy4uLmxpbmUubWF0Y2hBbGwoaHRtbFRhZ1BhdHRlcm4pXTtcclxuICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgaHRtbE1hdGNoZXMpIHtcclxuICAgICAgICBjb25zdCBzdGFydCA9IG1hdGNoLmluZGV4IHx8IDA7XHJcbiAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBtYXRjaFswXS5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGN1cnNvci5jaCA+PSBzdGFydCAmJiBjdXJzb3IuY2ggPD0gZW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gMTAuIFZcdTAwRTlyaWZpZXIgc2kgb24gZXN0IGRhbnMgdW4gaWRlbnRpZmlhbnQgZGUgdFx1MDBFMmNoZVxyXG4gICAgY29uc3QgdGFza1BhdHRlcm4gPSAvXlxccyotIFxcW1sgeF1cXF0vO1xyXG4gICAgaWYgKHRhc2tQYXR0ZXJuLnRlc3QobGluZSkgJiYgY3Vyc29yLmNoIDw9IGxpbmUuaW5kZXhPZihcIl1cIikgKyAxKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBJbmplY3RlIHVuIGZpY2hpZXIgQ1NTIGRhbnMgbGUgZG9jdW1lbnRcclxuICogQHBhcmFtIHBsdWdpbiBJbnN0YW5jZSBkdSBwbHVnaW5cclxuICogQHBhcmFtIGZpbGVOYW1lIE5vbSBkdSBmaWNoaWVyIENTUyAocmVsYXRpZiBhdSByXHUwMEU5cGVydG9pcmUgZHUgcGx1Z2luKVxyXG4gKiBAcmV0dXJucyBQcm9tZXNzZSByXHUwMEU5c29sdWUgdW5lIGZvaXMgbGUgQ1NTIGluamVjdFx1MDBFOVxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluamVjdENTU0Zyb21GaWxlKHBsdWdpbjogUGx1Z2luLCBmaWxlTmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHBsdWdpbkRpciA9IHBsdWdpbi5tYW5pZmVzdC5kaXI7XHJcbiAgICAgICAgY29uc3QgZmlsZVBhdGggPSBgJHtwbHVnaW5EaXJ9LyR7ZmlsZU5hbWV9YDtcclxuXHJcbiAgICAgICAgY29uc3QgY3NzQ29udGVudCA9IGF3YWl0IHBsdWdpbi5hcHAudmF1bHQuYWRhcHRlci5yZWFkKGZpbGVQYXRoKTtcclxuICAgICAgICBjb25zdCBzdHlsZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcclxuICAgICAgICBzdHlsZUVsLnRleHRDb250ZW50ID0gY3NzQ29udGVudDtcclxuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlRWwpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiXHUwMEM5Y2hlYyBkZSBjaGFyZ2VtZW50IGR1IGZpY2hpZXIgQ1NTOlwiLCBlcnJvcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWXHUwMEU5cmlmaWUgc2kgdW5lIGNoYVx1MDBFRW5lIGRlIGNhcmFjdFx1MDBFOHJlcyBlc3QgdmlkZSBvdSBuZSBjb250aWVudCBxdWUgZGVzIGVzcGFjZXNcclxuICogQHBhcmFtIHN0ciBDaGFcdTAwRUVuZSBcdTAwRTAgdlx1MDBFOXJpZmllclxyXG4gKiBAcmV0dXJucyB0cnVlIHNpIGxhIGNoYVx1MDBFRW5lIGVzdCB2aWRlIG91IG5lIGNvbnRpZW50IHF1ZSBkZXMgZXNwYWNlc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlPcldoaXRlc3BhY2Uoc3RyOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBzdHIgPT09IG51bGwgfHwgc3RyLnRyaW0oKSA9PT0gJyc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBPYnRpZW50IGxhIHBvc2l0aW9uIGR1IHRleHRlIGRhbnMgdW4gZG9jdW1lbnRcclxuICogQHBhcmFtIHRleHQgVGV4dGUgY29tcGxldFxyXG4gKiBAcGFyYW0gc2VhcmNoVGV4dCBUZXh0ZSBcdTAwRTAgcmVjaGVyY2hlclxyXG4gKiBAcGFyYW0gc3RhcnRJbmRleCBJbmRleCBkZSBkXHUwMEU5cGFydCBwb3VyIGxhIHJlY2hlcmNoZSAob3B0aW9ubmVsKVxyXG4gKiBAcmV0dXJucyBPYmpldCBhdmVjIGxlcyBwcm9wcmlcdTAwRTl0XHUwMEU5cyBmcm9tTGluZSwgZnJvbUNoLCB0b0xpbmUsIHRvQ2ggb3UgbnVsbCBzaSBub24gdHJvdXZcdTAwRTlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXh0UG9zaXRpb24odGV4dDogc3RyaW5nLCBzZWFyY2hUZXh0OiBzdHJpbmcsIHN0YXJ0SW5kZXggPSAwKToge1xyXG4gICAgZnJvbUxpbmU6IG51bWJlciwgXHJcbiAgICBmcm9tQ2g6IG51bWJlciwgXHJcbiAgICB0b0xpbmU6IG51bWJlciwgXHJcbiAgICB0b0NoOiBudW1iZXJcclxufSB8IG51bGwge1xyXG4gICAgY29uc3QgaW5kZXggPSB0ZXh0LmluZGV4T2Yoc2VhcmNoVGV4dCwgc3RhcnRJbmRleCk7XHJcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IHRleHRCZWZvcmUgPSB0ZXh0LnN1YnN0cmluZygwLCBpbmRleCk7XHJcbiAgICBjb25zdCBsaW5lcyA9IHRleHRCZWZvcmUuc3BsaXQoJ1xcbicpO1xyXG4gICAgY29uc3QgZnJvbUxpbmUgPSBsaW5lcy5sZW5ndGggLSAxO1xyXG4gICAgY29uc3QgZnJvbUNoID0gbGluZXNbZnJvbUxpbmVdLmxlbmd0aDtcclxuICAgIFxyXG4gICAgY29uc3Qgc2VhcmNoTGluZXMgPSBzZWFyY2hUZXh0LnNwbGl0KCdcXG4nKTtcclxuICAgIGNvbnN0IHRvTGluZSA9IGZyb21MaW5lICsgc2VhcmNoTGluZXMubGVuZ3RoIC0gMTtcclxuICAgIGNvbnN0IHRvQ2ggPSB0b0xpbmUgPT09IGZyb21MaW5lID8gXHJcbiAgICAgICAgZnJvbUNoICsgc2VhcmNoVGV4dC5sZW5ndGggOiBcclxuICAgICAgICBzZWFyY2hMaW5lc1tzZWFyY2hMaW5lcy5sZW5ndGggLSAxXS5sZW5ndGg7XHJcbiAgICBcclxuICAgIHJldHVybiB7IGZyb21MaW5lLCBmcm9tQ2gsIHRvTGluZSwgdG9DaCB9O1xyXG59XHJcblxyXG4vKipcclxuICogTWVzdXJlIGxlIHRlbXBzIGQnZXhcdTAwRTljdXRpb24gZCd1bmUgZm9uY3Rpb25cclxuICogQHBhcmFtIGZuIEZvbmN0aW9uIFx1MDBFMCBtZXN1cmVyXHJcbiAqIEBwYXJhbSBhcmdzIEFyZ3VtZW50cyBcdTAwRTAgcGFzc2VyIFx1MDBFMCBsYSBmb25jdGlvblxyXG4gKiBAcmV0dXJucyBMZSByXHUwMEU5c3VsdGF0IGRlIGxhIGZvbmN0aW9uIGV0IGxlIHRlbXBzIGQnZXhcdTAwRTljdXRpb24gZW4gbXNcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtZWFzdXJlRXhlY3V0aW9uVGltZTxULCBBIGV4dGVuZHMgYW55W10+KFxyXG4gICAgZm46ICguLi5hcmdzOiBBKSA9PiBQcm9taXNlPFQ+IHwgVCwgXHJcbiAgICAuLi5hcmdzOiBBXHJcbik6IFByb21pc2U8eyByZXN1bHQ6IFQsIGV4ZWN1dGlvblRpbWU6IG51bWJlciB9PiB7XHJcbiAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZuKC4uLmFyZ3MpO1xyXG4gICAgY29uc3QgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gICAgY29uc3QgZXhlY3V0aW9uVGltZSA9IGVuZFRpbWUgLSBzdGFydFRpbWU7XHJcbiAgICBcclxuICAgIHJldHVybiB7IHJlc3VsdCwgZXhlY3V0aW9uVGltZSB9O1xyXG59XHJcblxyXG4vKipcclxuICogQWZmaWNoZSB1biBtZXNzYWdlIGRlIHBlcmZvcm1hbmNlIGRhbnMgbGEgY29uc29sZVxyXG4gKiBAcGFyYW0gb3BlcmF0aW9uIE5vbSBkZSBsJ29wXHUwMEU5cmF0aW9uXHJcbiAqIEBwYXJhbSBleGVjdXRpb25UaW1lIFRlbXBzIGQnZXhcdTAwRTljdXRpb24gZW4gbXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2dQZXJmb3JtYW5jZShvcGVyYXRpb246IHN0cmluZywgZXhlY3V0aW9uVGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zb2xlLmxvZyhgUGVyZm9ybWFuY2UgLSAke29wZXJhdGlvbn06ICR7ZXhlY3V0aW9uVGltZS50b0ZpeGVkKDIpfW1zYCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFeFx1MDBFOWN1dGUgdW5lIGZvbmN0aW9uIGF2ZWMgdW4gZFx1MDBFOWxhaSBkJ2F0dGVudGVcclxuICogQ2V0dGUgZm9uY3Rpb24gZXN0IHV0aWxlIHBvdXIgXHUwMEU5dml0ZXIgZGUgYmxvcXVlciBsJ2ludGVyZmFjZSB1dGlsaXNhdGV1clxyXG4gKiBAcGFyYW0gZm4gRm9uY3Rpb24gXHUwMEUwIGV4XHUwMEU5Y3V0ZXJcclxuICogQHBhcmFtIGRlbGF5IERcdTAwRTlsYWkgZW4gbXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZTxGIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KGZuOiBGLCBkZWxheTogbnVtYmVyKTogKC4uLmFyZ3M6IFBhcmFtZXRlcnM8Rj4pID0+IHZvaWQge1xyXG4gICAgbGV0IHRpbWVvdXQ6IE5vZGVKUy5UaW1lb3V0O1xyXG4gICAgXHJcbiAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJnczogUGFyYW1ldGVyczxGPikge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBmbiguLi5hcmdzKSwgZGVsYXkpO1xyXG4gICAgfTtcclxufSIsICIvLyBNb2R1bGUgZCdhcGVyXHUwMEU3dSBkaXJlY3QgbWlzIFx1MDBFMCBqb3VyXHJcblxyXG5pbXBvcnQgeyBFZGl0b3IgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgTWljcm90eXBvZ3JhcGhpZVNldHRpbmdzIH0gZnJvbSAnLi4vc2V0dGluZ3Mvc2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBpc0luU3BlY2lhbEJsb2NrLCBpc0luUHJlc2VydmVkTWFya2Rvd24gfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBMaXZlVHlwb2dyYXBoeU1vZHVsZSB7XHJcbiAgICBwcml2YXRlIHNldHRpbmdzOiBNaWNyb3R5cG9ncmFwaGllU2V0dGluZ3M7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzOiBNaWNyb3R5cG9ncmFwaGllU2V0dGluZ3MpIHtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXNlIGxlIG1vZHVsZSBhdmVjIGxlcyBwYXJhbVx1MDBFOHRyZXMgYWN0dWVsc1xyXG4gICAgICogQHBhcmFtIHNldHRpbmdzIFBhcmFtXHUwMEU4dHJlcyBtaXMgXHUwMEUwIGpvdXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHVwZGF0ZVNldHRpbmdzKHNldHRpbmdzOiBNaWNyb3R5cG9ncmFwaGllU2V0dGluZ3MpIHtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHXHUwMEU4cmUgbGVzIFx1MDBFOXZcdTAwRTluZW1lbnRzIGNsYXZpZXIgcG91ciBhcHBsaXF1ZXIgbGVzIHJcdTAwRThnbGVzIHR5cG9ncmFwaGlxdWVzIGVuIHRlbXBzIHJcdTAwRTllbFxyXG4gICAgICogQHBhcmFtIGV2ZW50IFx1MDBDOXZcdTAwRTluZW1lbnQgY2xhdmllclxyXG4gICAgICogQHBhcmFtIGVkaXRvciBcdTAwQzlkaXRldXIgT2JzaWRpYW5cclxuICAgICAqIEByZXR1cm5zIHRydWUgc2kgbCdcdTAwRTl2XHUwMEU5bmVtZW50IGEgXHUwMEU5dFx1MDBFOSBnXHUwMEU5clx1MDBFOSwgZmFsc2Ugc2lub25cclxuICAgICAqL1xyXG4gICAgcHVibGljIGhhbmRsZUtleUV2ZW50KGV2ZW50OiBLZXlib2FyZEV2ZW50LCBlZGl0b3I6IEVkaXRvcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8vIFZcdTAwRTlyaWZpZXIgc2kgbGUgY3Vyc2V1ciBlc3QgZGFucyB1biBibG9jIHNwXHUwMEU5Y2lhbCBvdSB1biBcdTAwRTlsXHUwMEU5bWVudCBcdTAwRTAgcHJcdTAwRTlzZXJ2ZXJcclxuICAgICAgICBpZiAoaXNJblNwZWNpYWxCbG9jayhlZGl0b3IpIHx8IGlzSW5QcmVzZXJ2ZWRNYXJrZG93bihlZGl0b3IpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3IoKTtcclxuICAgICAgICBsZXQgaGFuZGxlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyBHXHUwMEU5cmVyIGwnYXBvc3Ryb3BoZSB0eXBvZ3JhcGhpcXVlXHJcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gXCInXCIpIHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbih0aGlzLnNldHRpbmdzLm9wZW5TaW5nbGVRdW90ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKHRoaXMuc2V0dGluZ3Mub3BlblNpbmdsZVF1b3RlLCBjdXJzb3IpO1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoICsgdGhpcy5zZXR0aW5ncy5vcGVuU2luZ2xlUXVvdGUubGVuZ3RoIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGhhbmRsZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBHXHUwMEU5cmVyIGxlcyBlc3BhY2VzIGluc1x1MDBFOWNhYmxlcyBhdmFudCBsYSBwb25jdHVhdGlvbiAoclx1MDBFOGdsZXMgZnJhblx1MDBFN2Fpc2VzKVxyXG4gICAgICAgIGVsc2UgaWYgKFsnIScsICc/JywgJzsnXS5pbmNsdWRlcyhldmVudC5rZXkpICYmIHRoaXMuc2V0dGluZ3MuZnJlbmNoUnVsZXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoYXJCZWZvcmUgPSBlZGl0b3IuZ2V0UmFuZ2UoXHJcbiAgICAgICAgICAgICAgICB7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoIC0gMSB9LFxyXG4gICAgICAgICAgICAgICAgY3Vyc29yXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoY2hhckJlZm9yZSA9PT0gXCIgXCIpIHtcclxuICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoXCJcXHUyMDJGXCIgKyBldmVudC5rZXksIFxyXG4gICAgICAgICAgICAgICAgICAgIHsgbGluZTogY3Vyc29yLmxpbmUsIGNoOiBjdXJzb3IuY2ggLSAxIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShldmVudC5rZXksIGN1cnNvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoICsgMSB9KTtcclxuICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEdcdTAwRTlyZXIgbGVzIGVzcGFjZXMgaW5zXHUwMEU5Y2FibGVzIGF2YW50IGxlcyBkZXV4LXBvaW50cyAoclx1MDBFOGdsZXMgZnJhblx1MDBFN2Fpc2VzKVxyXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gJzonICYmIHRoaXMuc2V0dGluZ3MuZnJlbmNoUnVsZXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoYXJCZWZvcmUgPSBlZGl0b3IuZ2V0UmFuZ2UoXHJcbiAgICAgICAgICAgICAgICB7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoIC0gMSB9LFxyXG4gICAgICAgICAgICAgICAgY3Vyc29yXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoY2hhckJlZm9yZSA9PT0gXCIgXCIpIHtcclxuICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoXCJcXHUwMEEwXCIgKyBldmVudC5rZXksIFxyXG4gICAgICAgICAgICAgICAgICAgIHsgbGluZTogY3Vyc29yLmxpbmUsIGNoOiBjdXJzb3IuY2ggLSAxIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShldmVudC5rZXksIGN1cnNvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoICsgMSB9KTtcclxuICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEdcdTAwRTlyZXIgbGVzIGd1aWxsZW1ldHMgcGVyc29ubmFsaXNhYmxlc1xyXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gJ1wiJykge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gSW5zXHUwMEU5cmVyIGxhIHBhaXJlIGNvbXBsXHUwMEU4dGUgZGUgZ3VpbGxlbWV0cyBwZXJzb25uYWxpc1x1MDBFOXMgYXZlYyBsZSBjdXJzZXVyIGF1IG1pbGlldVxyXG4gICAgICAgICAgICBjb25zdCBxdW90ZVNldCA9IHRoaXMuc2V0dGluZ3Mub3BlbkRvdWJsZVF1b3RlICsgdGhpcy5zZXR0aW5ncy5jbG9zZURvdWJsZVF1b3RlO1xyXG4gICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKHF1b3RlU2V0LCBjdXJzb3IpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gUGxhY2VyIGxlIGN1cnNldXIgZW50cmUgbGVzIGd1aWxsZW1ldHNcclxuICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7IFxyXG4gICAgICAgICAgICAgICAgbGluZTogY3Vyc29yLmxpbmUsIFxyXG4gICAgICAgICAgICAgICAgY2g6IGN1cnNvci5jaCArIHRoaXMuc2V0dGluZ3Mub3BlbkRvdWJsZVF1b3RlLmxlbmd0aCBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBoYW5kbGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gR2VzdGlvbiBwb3VyIGxlcyBwb2ludHMgZGUgc3VzcGVuc2lvblxyXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gJy4nICYmIHRoaXMuc2V0dGluZ3MuZWxsaXBzaXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHRCZWZvcmUgPSBlZGl0b3IuZ2V0UmFuZ2UoXHJcbiAgICAgICAgICAgICAgICB7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoIC0gMiB9LCBcclxuICAgICAgICAgICAgICAgIGN1cnNvclxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHRleHRCZWZvcmUgPT09ICcuLicpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKCdcdTIwMjYnLCBcclxuICAgICAgICAgICAgICAgICAgICB7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoIC0gMiB9LCBcclxuICAgICAgICAgICAgICAgICAgICBjdXJzb3JcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKHsgbGluZTogY3Vyc29yLmxpbmUsIGNoOiBjdXJzb3IuY2ggLSAxIH0pO1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gR2VzdGlvbiBwb3VyIGxlcyB0aXJldHNcclxuICAgICAgICBlbHNlIGlmIChldmVudC5rZXkgPT09ICctJyAmJiB0aGlzLnNldHRpbmdzLmRhc2hlc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgdGV4dEJlZm9yZSA9IGVkaXRvci5nZXRSYW5nZShcclxuICAgICAgICAgICAgICAgIHsgbGluZTogY3Vyc29yLmxpbmUsIGNoOiBjdXJzb3IuY2ggLSAxIH0sIFxyXG4gICAgICAgICAgICAgICAgY3Vyc29yXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5za2lwRW5EYXNoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBNb2RlIGRpcmVjdCAtLSB2ZXJzIGVtLWRhc2ggKFx1MjAxNClcclxuICAgICAgICAgICAgICAgIGlmICh0ZXh0QmVmb3JlID09PSAnLScpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoJ1x1MjAxNCcsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoIC0gMSB9LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKHsgbGluZTogY3Vyc29yLmxpbmUsIGNoOiBjdXJzb3IuY2ggfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBNb2RlIHByb2dyZXNzaWY6IC0tIHZlcnMgZW4tZGFzaCwgcHVpcyBlbi1kYXNoLSB2ZXJzIGVtLWRhc2gsIHB1aXMgZW0tZGFzaC0gdmVycyAtLS1cclxuICAgICAgICAgICAgICAgIGlmICh0ZXh0QmVmb3JlID09PSAnLScpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoJ1x1MjAxMycsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoIC0gMSB9LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKHsgbGluZTogY3Vyc29yLmxpbmUsIGNoOiBjdXJzb3IuY2ggfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRleHRCZWZvcmUgPT09ICdcdTIwMTMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKCdcdTIwMTQnLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyBsaW5lOiBjdXJzb3IubGluZSwgY2g6IGN1cnNvci5jaCAtIDEgfSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvclxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ZXh0QmVmb3JlID09PSAnXHUyMDE0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZSgnLS0tJywgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgbGluZTogY3Vyc29yLmxpbmUsIGNoOiBjdXJzb3IuY2ggLSAxIH0sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3JcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3IoeyBsaW5lOiBjdXJzb3IubGluZSwgY2g6IGN1cnNvci5jaCArIDIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gR2VzdGlvbiBwb3VyIGxlcyBndWlsbGVtZXRzIGZyYW5cdTAwRTdhaXMgdmlhIGNoZXZyb25zXHJcbiAgICAgICAgZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnPicgJiYgdGhpcy5zZXR0aW5ncy5ndWlsbGVtZXRzRW5hYmxlZCkge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0QmVmb3JlID0gZWRpdG9yLmdldFJhbmdlKFxyXG4gICAgICAgICAgICAgICAgeyBsaW5lOiBjdXJzb3IubGluZSwgY2g6IGN1cnNvci5jaCAtIDEgfSwgXHJcbiAgICAgICAgICAgICAgICBjdXJzb3JcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICh0ZXh0QmVmb3JlID09PSAnPicpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKCdcXHUyMDJGXHUwMEJCJywgXHJcbiAgICAgICAgICAgICAgICAgICAgeyBsaW5lOiBjdXJzb3IubGluZSwgY2g6IGN1cnNvci5jaCAtIDEgfSwgXHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoIH0pO1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gJzwnICYmIHRoaXMuc2V0dGluZ3MuZ3VpbGxlbWV0c0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgdGV4dEJlZm9yZSA9IGVkaXRvci5nZXRSYW5nZShcclxuICAgICAgICAgICAgICAgIHsgbGluZTogY3Vyc29yLmxpbmUsIGNoOiBjdXJzb3IuY2ggLSAxIH0sIFxyXG4gICAgICAgICAgICAgICAgY3Vyc29yXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodGV4dEJlZm9yZSA9PT0gJzwnKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZSgnXHUwMEFCXFx1MjAyRicsIFxyXG4gICAgICAgICAgICAgICAgICAgIHsgbGluZTogY3Vyc29yLmxpbmUsIGNoOiBjdXJzb3IuY2ggLSAxIH0sIFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvclxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3IoeyBsaW5lOiBjdXJzb3IubGluZSwgY2g6IGN1cnNvci5jaCB9KTtcclxuICAgICAgICAgICAgICAgIGhhbmRsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBoYW5kbGVkO1xyXG4gICAgfVxyXG59IiwgIi8vIEZpY2hpZXIgdHlwb2dyYXBoeVJ1bGVzLnRzIHNpbXBsaWZpXHUwMEU5XHJcblxyXG5pbXBvcnQgeyBNaWNyb3R5cG9ncmFwaGllU2V0dGluZ3MgfSBmcm9tIFwiLi4vc2V0dGluZ3Mvc2V0dGluZ3NcIjtcclxuXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2UgcG91ciB1bmUgclx1MDBFOGdsZSB0eXBvZ3JhcGhpcXVlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFR5cG9ncmFwaGljUnVsZSB7XHJcbiAgcmVnOiBSZWdFeHA7XHJcbiAgcmVwbDogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogU3RydWN0dXJlIHBvdXIgbCdlbnNlbWJsZSBkZXMgclx1MDBFOGdsZXMgY29tcGlsXHUwMEU5ZXNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRSdWxlcyB7XHJcbiAgZnJlbmNoUnVsZXM6IFR5cG9ncmFwaGljUnVsZVtdOyAvLyBSXHUwMEU4Z2xlcyB0eXBvZ3JhcGhpcXVlcyBmcmFuXHUwMEU3YWlzZXNcclxuICBkYXNoUnVsZXM6IFR5cG9ncmFwaGljUnVsZVtdOyAvLyBSXHUwMEU4Z2xlcyBwb3VyIGxlcyB0aXJldHNcclxufVxyXG5cclxuLy8gRFx1MDBFOWZpbmlyIGxlcyByXHUwMEU4Z2xlcyB0eXBvZ3JhcGhpcXVlcyBmcmFuXHUwMEU3YWlzZXNcclxuY29uc3QgRlJFTkNIX1JVTEVTOiBUeXBvZ3JhcGhpY1J1bGVbXSA9IFtcclxuICAvLyBSXHUwMEU4Z2xlcyBvcnRob2dyYXBoaXF1ZXNcclxuICB7IHJlZzogLyhYfEl8VilcdTAwRThtZS9nLCByZXBsOiBcIiQxZVwiIH0sXHJcbiAgeyByZWc6IC8oWHxJfFYpZW1lL2csIHJlcGw6IFwiJDFlXCIgfSxcclxuICB7IHJlZzogLyhYfEl8VilcdTAwRTltZS9nLCByZXBsOiBcIiQxZVwiIH0sXHJcbiAgeyByZWc6IC9vZS9nLCByZXBsOiBcIlx1MDE1M1wiIH0sXHJcbiAgeyByZWc6IC9PRS9nLCByZXBsOiBcIlx1MDE1MlwiIH0sXHJcbiAgeyByZWc6IC9PZS9nLCByZXBsOiBcIlx1MDE1MlwiIH0sXHJcbiAgeyByZWc6IC9hZS9nLCByZXBsOiBcIlx1MDBFNlwiIH0sXHJcbiAgeyByZWc6IC9BRS9nLCByZXBsOiBcIlx1MDBDNlwiIH0sXHJcbiAgeyByZWc6IC9BZS9nLCByZXBsOiBcIlx1MDBDNlwiIH0sXHJcblxyXG4gIC8vIGZyZW5jaCBvcGVuIHF1b3Rlc1xyXG4gIHsgcmVnOiAvXFxcIihbQS1aYS16XHUwMEMwLVx1MDBENlx1MDBEOC1cdTAwRjZcdTAwRjgtXHUwMEZGXHUwMTUzXHUwMTUyXSkvZywgcmVwbDogXCJcdTAwQUJcXHUyMDJGJDFcIiB9LFxyXG4gIC8vIGZyZW5jaCBjbG9zZSBxdW90ZXMgLSB2ZXJzaW9uIGFtXHUwMEU5bGlvclx1MDBFOWVcclxuICB7IHJlZzogLyhbXlxcc11bIT87Oi4sXT8pXFxzKlxcXCIvZywgcmVwbDogXCIkMVxcdTIwMkZcdTAwQkJcIiB9LFxyXG4gIC8vIHJlYWwgYXBvc3Ryb3BoZVxyXG4gIHsgcmVnOiAvXFwnL2csIHJlcGw6IFwiXHUyMDE5XCIgfSxcclxuICAvLyByZWFsIHN1c3BlbnNpb24gcG9pbnRzXHJcbiAgeyByZWc6IC9cXC57Myx9L2csIHJlcGw6IFwiXFx1MjAyNlwiIH0sXHJcbiAgLy8gZGVsZXRlIGFsbCBzcGFjZXMgYmVmb3JlIHB1bmN0dWF0aW9uICE/OzpcdTAwQkJcdTIwM0FcdTIwMUQpXS4sXHJcbiAgeyByZWc6IC9cXHMrKFshPzs6XHUwMEJCXHUyMDNBXCIpXFxdXFwuXFwsXSkvZywgcmVwbDogXCIkMVwiIH0sXHJcbiAgLy8gYWRkIG5hcnJvdyBubyBicmVhayBzcGFjZSBiZWZvcmUgIT87XHUwMEJCXHUyMDNBXHJcbiAgeyByZWc6IC8oWyE/O1x1MDBCQlx1MjAzQV0pL2csIHJlcGw6IFwiXFx1MjAyRiQxXCIgfSxcclxuICAvLyBhZGQgbm8gYnJlYWsgc3BhY2UgYmVmb3JlIDogKGNvcnJlY3RseSBoYW5kbGluZyBleGlzdGluZyBzcGFjZXMsIGJ1dCBhdm9pZGluZyBVUkxzKVxyXG4gIHsgcmVnOiAvXFxzKyg6KSg/IVxcL1xcLykvZywgcmVwbDogXCJcXHUwMEEwJDFcIiB9LFxyXG4gIHsgcmVnOiAvKFteXFxzOlxcL10pKDopKD8hXFwvXFwvKS9nLCByZXBsOiBcIiQxXFx1MDBBMCQyXCIgfSxcclxuICAvLyBkZWxldGUgYWxsIHNwYWNlcyBhZnRlciBcdTAwQUJcdTIwMzlcdTIwMUNbKFxyXG4gIHsgcmVnOiAvKFtcdTAwQUJcdTIwMzlcIlxcWyhdKVxccysvZywgcmVwbDogXCIkMVwiIH0sXHJcbiAgLy8gYWRkIG5hcnJvdyBubyBicmVhayBzcGFjZSBhZnRlciBcdTAwQUJcdTIwMzlcclxuICB7IHJlZzogLyhbXHUwMEFCXHUyMDM5XSkvZywgcmVwbDogXCIkMVxcdTIwMkZcIiB9LFxyXG4gIC8vIG5vIGJyZWFrIHNwYWNlIGFmdGVyIG9uZSBsZXR0ZXIgd29yZHNcclxuICB7IHJlZzogL1xccysoW2Etelx1MDBFMF0pXFxzKy9naSwgcmVwbDogXCIgJDFcXHUwMEEwXCIgfSxcclxuICAvLyBubyBicmVhayBzcGFjZSBpbnRvIG5hbWVzXHJcbiAge1xyXG4gICAgcmVnOiAvKFtBLVpcdTAwQzAtXHUwMEQ2XHUwMEQ4XHUwMTUyXSkoW0EtWmEtelx1MDBDMC1cdTAwRDZcdTAwRDgtXHUwMEY2XHUwMEY4LVx1MDBGRlx1MDE1M1x1MDE1Ml0rKVxccysoW0EtWlx1MDBDMC1cdTAwRDZcdTAwRDhcdTAxNTJdKShbQS1aYS16XHUwMEMwLVx1MDBENlx1MDBEOC1cdTAwRjZcdTAwRjgtXHUwMEZGXHUwMTUzXHUwMTUyXSspL2csXHJcbiAgICByZXBsOiBcIiQxJDJcXHUwMEEwJDMkNFwiLFxyXG4gIH0sXHJcbiAgLy8gbm8gYnJlYWsgc3BhY2UgYWZ0ZXIgYWJicmV2aWF0aW9uIHdpdGggcGVyaW9kXHJcbiAge1xyXG4gICAgcmVnOiAvKFtBLVpcdTAwQzAtXHUwMEQ2XHUwMEQ4XHUwMTUyXVxcLilcXHMrKFtBLVpcdTAwQzAtXHUwMEQ2XHUwMEQ4XHUwMTUyXVtBLVphLXpcdTAwQzAtXHUwMEQ2XHUwMEQ4LVx1MDBGNlx1MDBGOC1cdTAwRkZcdTAxNTNcdTAxNTJdKykvZyxcclxuICAgIHJlcGw6IFwiJDFcXHUwMEEwJDJcIixcclxuICB9LFxyXG4gIC8vIG5vIGJyZWFrIHNwYWNlIGJlZm9yZSAnc2lcdTAwRThjbGVzJ1xyXG4gIHsgcmVnOiAvKFh8SXxWKShlcnxlKVxccytzaVx1MDBFOGNsZS9nLCByZXBsOiBcIiQxJDJcXHUwMEEwc2lcdTAwRThjbGVcIiB9LFxyXG4gIC8vIGFkZCBzdWJcclxuICB7IHJlZzogLyhYfEl8VikoZXJ8ZSkvZywgcmVwbDogXCIkMTxzdXA+JDI8L3N1cD5cIiB9LFxyXG4gIC8vIFRyYW5zZm9ybWVyIGxlcyBndWlsbGVtZXRzIHNpbXBsZXMgXHUwMEUwIGwnaW50XHUwMEU5cmlldXIgZGUgZ3VpbGxlbWV0cyBkb3VibGVzIGVuIGd1aWxsZW1ldHMgYW5nbGFpc1xyXG4gIHsgcmVnOiAvKFx1MDBBQlxcdTIwMkZbXlx1MDBCQl0qKScoW15cdTIwMTldKiknKFteXHUwMEJCXSpcXHUyMDJGXHUwMEJCKS9nLCByZXBsOiAnJDFcIiQyXCIkMycgfSxcclxuICAvLyBham91dGVyIGVzcGFjZSBhcHJcdTAwRThzIGd1aWxsZW1ldCBmZXJtYW50IHN1aXZpIGQndW4gbW90XHJcbiAgeyByZWc6IC8oXHUwMEJCKShbQS1aYS16XHUwMEMwLVx1MDBENlx1MDBEOC1cdTAwRjZcdTAwRjgtXHUwMEZGXHUwMTUzXHUwMTUyMC05XSkvZywgcmVwbDogXCIkMSAkMlwiIH0sXHJcbiAgLy8gVHJhbnNmb3JtZXIgbGVzIGd1aWxsZW1ldHMgc2ltcGxlcyBcdTAwRTAgbCdpbnRcdTAwRTlyaWV1ciBkZSBndWlsbGVtZXRzIGRvdWJsZXMgZW4gZ3VpbGxlbWV0cyBhbmdsYWlzXHJcbiAgeyByZWc6IC8oXHUwMEFCXFx1MjAyRlteXHUwMEJCXSopXHUwMEFCXFx1MjAyRihbXlx1MDBCQl0qKVxcdTIwMkZcdTAwQkIoW15cdTAwQkJdKlxcdTIwMkZcdTAwQkIpL2csIHJlcGw6ICckMVxcXHUyMDFDJDJcXFx1MjAxRCQzJyAgfSxcclxuXTtcclxuXHJcbi8vIFJcdTAwRThnbGVzIGRlIGJhc2UgcG91ciBsZXMgZXNwYWNlcyAobm9uIHNwXHUwMEU5Y2lmaXF1ZXMgYXUgZnJhblx1MDBFN2FpcylcclxuY29uc3QgQkFTRV9SVUxFUzogVHlwb2dyYXBoaWNSdWxlW10gPSBbXHJcbiAgLy8gUlx1MDBFOGdsZXMgbWluaW1hbGVzIHBvdXIgbGVzIGVzcGFjZXMgcXVpIG5lIHNvbnQgcGFzIHNwXHUwMEU5Y2lmaXF1ZXMgYXUgZnJhblx1MDBFN2Fpc1xyXG5dO1xyXG5cclxuLyoqXHJcbiAqIENvbXBpbGUgbCdlbnNlbWJsZSBkZXMgclx1MDBFOGdsZXMgdHlwb2dyYXBoaXF1ZXMgZW4gZm9uY3Rpb24gZGVzIHBhcmFtXHUwMEU4dHJlc1xyXG4gKiBAcGFyYW0gc2V0dGluZ3MgUGFyYW1cdTAwRTh0cmVzIGR1IHBsdWdpblxyXG4gKiBAcmV0dXJucyBFbnNlbWJsZSBkZXMgclx1MDBFOGdsZXMgY29tcGlsXHUwMEU5ZXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlUnVsZXMoXHJcbiAgc2V0dGluZ3M6IE1pY3JvdHlwb2dyYXBoaWVTZXR0aW5nc1xyXG4pOiBDb21waWxlZFJ1bGVzIHtcclxuICAvLyBJbml0aWFsaXNlciBsZSB0YWJsZWF1IGRlIHJcdTAwRThnbGVzXHJcbiAgbGV0IGZyZW5jaFJ1bGVzOiBUeXBvZ3JhcGhpY1J1bGVbXSA9IFtdO1xyXG5cclxuICAvLyBSXHUwMEU4Z2xlcyBwb3VyIGxlcyBndWlsbGVtZXRzIHBlcnNvbm5hbGlzYWJsZXMgZXQgYXBvc3Ryb3BoZXMgKHRvdWpvdXJzIGFjdGl2ZXMpXHJcbiAgZnJlbmNoUnVsZXMucHVzaChcclxuICAgIHtcclxuICAgICAgcmVnOiBuZXcgUmVnRXhwKGBcIihbQS1aYS16XHUwMEMwLVx1MDBENlx1MDBEOC1cdTAwRjZcdTAwRjgtXHUwMEZGXHUwMTUzXHUwMTUyXSlgLCBcImdcIiksXHJcbiAgICAgIHJlcGw6IHNldHRpbmdzLm9wZW5Eb3VibGVRdW90ZSArIFwiJDFcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHJlZzogbmV3IFJlZ0V4cChgKFtBLVphLXpcdTAwQzAtXHUwMEQ2XHUwMEQ4LVx1MDBGNlx1MDBGOC1cdTAwRkZcdTAxNTNcdTAxNTJdWyE/OzouLF0/KVxcXCJgLCBcImdcIiksXHJcbiAgICAgIHJlcGw6IFwiJDFcIiArIHNldHRpbmdzLmNsb3NlRG91YmxlUXVvdGUsXHJcbiAgICB9LFxyXG4gICAgLy8gQXBvc3Ryb3BoZSB0eXBvZ3JhcGhpcXVlIHBlcnNvbm5hbGlzYWJsZVxyXG4gICAgeyByZWc6IC9cXCcvZywgcmVwbDogc2V0dGluZ3Mub3BlblNpbmdsZVF1b3RlIH1cclxuICApO1xyXG5cclxuICAvLyBUcmFpdGVtZW50IGRlcyBwb2ludHMgZGUgc3VzcGVuc2lvbiBzaSBhY3Rpdlx1MDBFOVxyXG4gIGlmIChzZXR0aW5ncy5lbGxpcHNpc0VuYWJsZWQpIHtcclxuICAgIGZyZW5jaFJ1bGVzLnB1c2goeyByZWc6IC9cXC57Myx9L2csIHJlcGw6IFwiXFx1MjAyNlwiIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gUlx1MDBFOGdsZXMgcG91ciBsZXMgZ3VpbGxlbWV0cyB2aWEgY2hldnJvbnMgc2kgYWN0aXZcdTAwRTlzXHJcbiAgaWYgKHNldHRpbmdzLmd1aWxsZW1ldHNFbmFibGVkKSB7XHJcbiAgICBmcmVuY2hSdWxlcy5wdXNoKHsgcmVnOiAvPDwvZywgcmVwbDogXCJcdTAwQUJcXHUyMDJGXCIgfSwgeyByZWc6IC8+Pi9nLCByZXBsOiBcIlxcdTIwMkZcdTAwQkJcIiB9KTtcclxuICB9XHJcblxyXG4gIC8vIEFqb3V0ZXIgbGVzIHJcdTAwRThnbGVzIGZyYW5cdTAwRTdhaXNlcyBzaSBhY3Rpdlx1MDBFOWVzXHJcbiAgaWYgKHNldHRpbmdzLmZyZW5jaFJ1bGVzRW5hYmxlZCkge1xyXG4gICAgZnJlbmNoUnVsZXMgPSBbLi4uZnJlbmNoUnVsZXMsIC4uLkZSRU5DSF9SVUxFU107XHJcbiAgICBcclxuICAgIC8vIEFqb3V0ZXIgbGEgclx1MDBFOGdsZSBwb3VyIGxlcyBndWlsbGVtZXRzIGFuZ2xhaXMgZGFucyBsZXMgZ3VpbGxlbWV0cyBmcmFuXHUwMEU3YWlzXHJcbiAgICBmcmVuY2hSdWxlcy5wdXNoKHsgXHJcbiAgICAgIHJlZzogLyhcdTAwQUJcXHUyMDJGW15cdTAwQkJdKilcdTAwQUJcXHUyMDJGKFteXHUwMEJCXSopXFx1MjAyRlx1MDBCQihbXlx1MDBCQl0qXFx1MjAyRlx1MDBCQikvZywgXHJcbiAgICAgIHJlcGw6ICckMVxcXHUyMDFDJDJcXFx1MjAxRCQzJyAgXHJcbiAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgZnJlbmNoUnVsZXMgPSBbLi4uZnJlbmNoUnVsZXMsIC4uLkJBU0VfUlVMRVNdO1xyXG4gIH1cclxuXHJcbiAgLy8gQ3JcdTAwRTllciBsZXMgclx1MDBFOGdsZXMgcG91ciBsZXMgdGlyZXRzIGVuIGZvbmN0aW9uIGRlcyBwYXJhbVx1MDBFOHRyZXNcclxuICBjb25zdCBkYXNoUnVsZXM6IFR5cG9ncmFwaGljUnVsZVtdID0gW107XHJcblxyXG4gIGlmIChzZXR0aW5ncy5kYXNoZXNFbmFibGVkKSB7XHJcbiAgICBpZiAoc2V0dGluZ3Muc2tpcEVuRGFzaCkge1xyXG4gICAgICAvLyBNb2RlIGRpcmVjdDogLS0gZGV2aWVudCBkaXJlY3RlbWVudCBcdTIwMTRcclxuICAgICAgZGFzaFJ1bGVzLnB1c2goeyByZWc6IC8tLS9nLCByZXBsOiBcIlx1MjAxNFwiIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gTW9kZSBwcm9ncmVzc2lmXHJcbiAgICAgIGRhc2hSdWxlcy5wdXNoKFxyXG4gICAgICAgIHsgcmVnOiAvLS0vZywgcmVwbDogXCJcdTIwMTNcIiB9LCAvLyAtLSBkZXZpZW50IFx1MjAxM1xyXG4gICAgICAgIHsgcmVnOiAvXHUyMDEzLS9nLCByZXBsOiBcIlx1MjAxNFwiIH0sIC8vIFx1MjAxMy0gZGV2aWVudCBcdTIwMTRcclxuICAgICAgICB7IHJlZzogL1x1MjAxNC0vZywgcmVwbDogXCItLS1cIiB9IC8vIFx1MjAxNC0gZGV2aWVudCAtLS1cclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7IGZyZW5jaFJ1bGVzLCBkYXNoUnVsZXMgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFwcGxpcXVlIHVuZSBzXHUwMEU5cmllIGRlIHJcdTAwRThnbGVzIHR5cG9ncmFwaGlxdWVzIFx1MDBFMCB1biB0ZXh0ZVxyXG4gKiBAcGFyYW0gdGV4dCBUZXh0ZSBkJ2VudHJcdTAwRTllXHJcbiAqIEBwYXJhbSBydWxlcyBSXHUwMEU4Z2xlcyBcdTAwRTAgYXBwbGlxdWVyXHJcbiAqIEByZXR1cm5zIFRleHRlIHRyYW5zZm9ybVx1MDBFOVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UnVsZXModGV4dDogc3RyaW5nLCBydWxlczogVHlwb2dyYXBoaWNSdWxlW10pOiBzdHJpbmcge1xyXG4gIGxldCByZXN1bHQgPSB0ZXh0O1xyXG4gIGZvciAoY29uc3QgcnVsZSBvZiBydWxlcykge1xyXG4gICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UocnVsZS5yZWcsIHJ1bGUucmVwbCk7XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuIiwgIi8vIFByb2Nlc3NldXIgZGUgdGV4dGUgbWlzIFx1MDBFMCBqb3VyIHBvdXIgbGEgbm91dmVsbGUgc3RydWN0dXJlXHJcblxyXG5pbXBvcnQgeyBDb21waWxlZFJ1bGVzLCBhcHBseVJ1bGVzIH0gZnJvbSAnLi90eXBvZ3JhcGh5UnVsZXMnO1xyXG5cclxuLyoqXHJcbiAqIEFwcGxpcXVlIHRvdXRlcyBsZXMgY2F0XHUwMEU5Z29yaWVzIGRlIHJcdTAwRThnbGVzIFx1MDBFMCB1biB0ZXh0ZVxyXG4gKiBAcGFyYW0gdGV4dCBUZXh0ZSBkJ2VudHJcdTAwRTllXHJcbiAqIEBwYXJhbSBydWxlcyBFbnNlbWJsZSBkZXMgclx1MDBFOGdsZXMgY29tcGlsXHUwMEU5ZXNcclxuICogQHJldHVybnMgVGV4dGUgdHJhbnNmb3JtXHUwMEU5XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlBbGxSdWxlcyh0ZXh0OiBzdHJpbmcsIHJ1bGVzOiBDb21waWxlZFJ1bGVzKTogc3RyaW5nIHtcclxuICAgIGxldCByZXN1bHQgPSB0ZXh0O1xyXG4gICAgXHJcbiAgICAvLyBUYWJsZWF1IHBvdXIgc3RvY2tlciBsZXMgXHUwMEU5bFx1MDBFOW1lbnRzIFx1MDBFMCBwclx1MDBFOXNlcnZlclxyXG4gICAgY29uc3QgcHJlc2VydmVkRWxlbWVudHM6IHN0cmluZ1tdID0gW107XHJcbiAgICBcclxuICAgIC8vIExpc3RlIGRlcyBwYXR0ZXJucyBcdTAwRTAgcHJcdTAwRTlzZXJ2ZXJcclxuICAgIGNvbnN0IHBhdHRlcm5zID0gW1xyXG4gICAgICAgIC9cXFtcXFsuKj9cXF1cXF0vZywgICAgICAgICAgIC8vIExpZW5zIE9ic2lkaWFuIFtbbGllbl1dXHJcbiAgICAgICAgL1xcWy4qP1xcXVxcKC4qP1xcKS9nLCAgICAgICAgLy8gTGllbnMgTWFya2Rvd24gW3RleHRlXSh1cmwpXHJcbiAgICAgICAgLyFcXFsuKj9cXF1cXCguKj9cXCkvZywgICAgICAgLy8gSW1hZ2VzICFbYWx0XSh1cmwpXHJcbiAgICAgICAgL2BbXmBdK2AvZywgICAgICAgICAgICAgICAvLyBDb2RlIGlubGluZSBgY29kZWBcclxuICAgICAgICAvYGBgW1xcc1xcU10qP2BgYC9nLCAgICAgICAgLy8gQmxvY3MgZGUgY29kZVxyXG4gICAgICAgIC8+XFxzLiokL2dtLCAgICAgICAgICAgICAgIC8vIENhbGxvdXRzIChsaWduZXMgY29tbWVuXHUwMEU3YW50IHBhciBcIj4gXCIpXHJcbiAgICAgICAgLzxbXj5dKj4vZywgICAgICAgICAgICAgICAvLyBCYWxpc2VzIEhUTUxcclxuICAgICAgICAvXFwkXFwkW14kXSpcXCRcXCQvZywgICAgICAgICAvLyBcdTAwQzlxdWF0aW9ucyBtYXRoXHUwMEU5bWF0aXF1ZXMgJCRlcXVhdGlvbiQkXHJcbiAgICAgICAgL1xcJFteJF0qXFwkL2csICAgICAgICAgICAgIC8vIFx1MDBDOXF1YXRpb25zIG1hdGhcdTAwRTltYXRpcXVlcyBpbmxpbmUgJGVxdWF0aW9uJFxyXG4gICAgICAgIC9cXHtbXn1dKlxcfS9nLCAgICAgICAgICAgICAvLyBDb250ZW51IGVudHJlIGFjY29sYWRlcyB7Y29udGVudX1cclxuICAgICAgICAvaHR0cHM/OlxcL1xcL1teXFxzXSsvZywgICAgIC8vIFVSTHMgYXZlYyBodHRwOiBvdSBodHRwczpcclxuICAgICAgICAvW2Etel0rOlxcL1xcL1teXFxzXSsvZywgICAgIC8vIEF1dHJlcyBwcm90b2NvbGVzIChmdHA6LCBmaWxlOiwgZXRjLilcclxuICAgICAgICAvW2EtekEtWjAtOV8uKy1dK0BbYS16QS1aMC05LV0rXFwuW2EtekEtWjAtOS0uXSsvZywgLy8gQWRyZXNzZXMgZW1haWxcclxuICAgIF07XHJcbiAgICBcclxuICAgIC8vIEV4dHJhaXJlIGV0IHJlbXBsYWNlciBsZXMgXHUwMEU5bFx1MDBFOW1lbnRzIFx1MDBFMCBwclx1MDBFOXNlcnZlclxyXG4gICAgbGV0IHRlbXBUZXh0ID0gcmVzdWx0O1xyXG4gICAgbGV0IGVsZW1lbnRJbmRleCA9IDA7XHJcbiAgICBcclxuICAgIC8vIFBvdXIgY2hhcXVlIHBhdHRlcm5cclxuICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBwYXR0ZXJucykge1xyXG4gICAgICAgIGxldCBtYXRjaDtcclxuICAgICAgICAvLyBVdGlsaXNlciB1bmUgY2hhXHUwMEVFbmUgdGVtcG9yYWlyZSBwb3VyIFx1MDBFOXZpdGVyIGxlcyBwcm9ibFx1MDBFOG1lcyBkZSByZW1wbGFjZW1lbnRcclxuICAgICAgICBsZXQgc2VhcmNoVGV4dCA9IHRlbXBUZXh0O1xyXG4gICAgICAgIGxldCByZXBsYWNlZFRleHQgPSB0ZW1wVGV4dDtcclxuICAgICAgICBcclxuICAgICAgICB3aGlsZSAoKG1hdGNoID0gcGF0dGVybi5leGVjKHNlYXJjaFRleHQpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IGBfX1BSRVNFUlZFRF9FTEVNRU5UXyR7ZWxlbWVudEluZGV4fV9fYDtcclxuICAgICAgICAgICAgcHJlc2VydmVkRWxlbWVudHMucHVzaChtYXRjaFswXSk7XHJcbiAgICAgICAgICAgIC8vIFJlbXBsYWNlciB1bmlxdWVtZW50IGxhIHByZW1pXHUwMEU4cmUgb2NjdXJyZW5jZVxyXG4gICAgICAgICAgICByZXBsYWNlZFRleHQgPSByZXBsYWNlZFRleHQucmVwbGFjZShtYXRjaFswXSwgcGxhY2Vob2xkZXIpO1xyXG4gICAgICAgICAgICBlbGVtZW50SW5kZXgrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGVtcFRleHQgPSByZXBsYWNlZFRleHQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIEFwcGxpcXVlciBsZXMgclx1MDBFOGdsZXMgdHlwb2dyYXBoaXF1ZXMgZnJhblx1MDBFN2Fpc2VzXHJcbiAgICB0ZW1wVGV4dCA9IGFwcGx5UnVsZXModGVtcFRleHQsIHJ1bGVzLmZyZW5jaFJ1bGVzKTtcclxuICAgIFxyXG4gICAgLy8gQXBwbGlxdWVyIGxlcyByXHUwMEU4Z2xlcyBkZSB0aXJldHNcclxuICAgIHRlbXBUZXh0ID0gYXBwbHlSdWxlcyh0ZW1wVGV4dCwgcnVsZXMuZGFzaFJ1bGVzKTtcclxuICAgIFxyXG4gICAgLy8gUlx1MDBFOWludFx1MDBFOWdyZXIgbGVzIFx1MDBFOWxcdTAwRTltZW50cyBwclx1MDBFOXNlcnZcdTAwRTlzXHJcbiAgICByZXN1bHQgPSB0ZW1wVGV4dDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlc2VydmVkRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IGBfX1BSRVNFUlZFRF9FTEVNRU5UXyR7aX1fX2A7XHJcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UocGxhY2Vob2xkZXIsIHByZXNlcnZlZEVsZW1lbnRzW2ldKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYWl0ZSB1biB0ZXh0ZSBlbiByZXNwZWN0YW50IGxlcyBibG9jcyBzcFx1MDBFOWNpYXV4IChjb2RlLCBmcm9udG1hdHRlcilcclxuICogQHBhcmFtIHRleHQgVGV4dGUgXHUwMEUwIHRyYWl0ZXJcclxuICogQHBhcmFtIGJsb2NrcyBUeXBlcyBkZSBibG9jcyBwb3VyIGNoYXF1ZSBsaWduZVxyXG4gKiBAcGFyYW0gcnVsZXMgUlx1MDBFOGdsZXMgY29tcGlsXHUwMEU5ZXNcclxuICogQHJldHVybnMgVGV4dGUgdHJhbnNmb3JtXHUwMEU5XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1RleHRXaXRoQmxvY2tzKHRleHQ6IHN0cmluZywgYmxvY2tzOiBzdHJpbmdbXSwgcnVsZXM6IENvbXBpbGVkUnVsZXMpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KCdcXG4nKTtcclxuICAgIGNvbnN0IHByb2Nlc3NlZExpbmVzID0gW107XHJcbiAgICBcclxuICAgIC8vIFJlZ3JvdXBlciBsZXMgbGlnbmVzIG5vcm1hbGVzIGNvbnNcdTAwRTljdXRpdmVzIHBvdXIgdW4gdHJhaXRlbWVudCBwbHVzIGVmZmljYWNlXHJcbiAgICBsZXQgbm9ybWFsVGV4dEJ1ZmZlciA9IFtdO1xyXG4gICAgbGV0IGxhc3RCbG9ja1R5cGUgPSAnJztcclxuICAgIFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRCbG9ja1R5cGUgPSBibG9ja3NbaV07XHJcbiAgICAgICAgY29uc3QgbGluZSA9IGxpbmVzW2ldO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChjdXJyZW50QmxvY2tUeXBlID09PSAnbm9ybWFsJykge1xyXG4gICAgICAgICAgICAvLyBBam91dGVyIGF1IGJ1ZmZlciBwb3VyIHRyYWl0ZW1lbnQgZ3JvdXBcdTAwRTlcclxuICAgICAgICAgICAgbm9ybWFsVGV4dEJ1ZmZlci5wdXNoKGxpbmUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFRyYWl0ZXIgbGUgYnVmZmVyIGFjY3VtdWxcdTAwRTkgc2kgblx1MDBFOWNlc3NhaXJlXHJcbiAgICAgICAgICAgIGlmIChub3JtYWxUZXh0QnVmZmVyLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NlZEJ1ZmZlciA9IGFwcGx5QWxsUnVsZXMobm9ybWFsVGV4dEJ1ZmZlci5qb2luKCdcXG4nKSwgcnVsZXMpO1xyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc2VkTGluZXMucHVzaCguLi5wcm9jZXNzZWRCdWZmZXIuc3BsaXQoJ1xcbicpKTtcclxuICAgICAgICAgICAgICAgIG5vcm1hbFRleHRCdWZmZXIgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gQWpvdXRlciBsYSBsaWduZSBzcFx1MDBFOWNpYWxlIHNhbnMgbW9kaWZpY2F0aW9uXHJcbiAgICAgICAgICAgIHByb2Nlc3NlZExpbmVzLnB1c2gobGluZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGxhc3RCbG9ja1R5cGUgPSBjdXJyZW50QmxvY2tUeXBlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBUcmFpdGVyIHRvdXQgdGV4dGUgbm9ybWFsIHJlc3RhbnQgZGFucyBsZSBidWZmZXJcclxuICAgIGlmIChub3JtYWxUZXh0QnVmZmVyLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBjb25zdCBwcm9jZXNzZWRCdWZmZXIgPSBhcHBseUFsbFJ1bGVzKG5vcm1hbFRleHRCdWZmZXIuam9pbignXFxuJyksIHJ1bGVzKTtcclxuICAgICAgICBwcm9jZXNzZWRMaW5lcy5wdXNoKC4uLnByb2Nlc3NlZEJ1ZmZlci5zcGxpdCgnXFxuJykpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gcHJvY2Vzc2VkTGluZXMuam9pbignXFxuJyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWZXJzaW9uIG9wdGltaXNcdTAwRTllIHBvdXIgbGUgdHJhaXRlbWVudCBhc3luY2hyb25lIGRlIGdyYW5kcyBkb2N1bWVudHNcclxuICogQHBhcmFtIHRleHQgVGV4dGUgXHUwMEUwIHRyYWl0ZXJcclxuICogQHBhcmFtIGJsb2NrcyBUeXBlcyBkZSBibG9jcyBwb3VyIGNoYXF1ZSBsaWduZVxyXG4gKiBAcGFyYW0gcnVsZXMgUlx1MDBFOGdsZXMgY29tcGlsXHUwMEU5ZXNcclxuICogQHBhcmFtIGNhbGxiYWNrIEZvbmN0aW9uIGRlIGNhbGxiYWNrIGFwcGVsXHUwMEU5ZSBhdmVjIGxlIHJcdTAwRTlzdWx0YXRcclxuICogQHBhcmFtIGJhdGNoU2l6ZSBUYWlsbGUgZGVzIGxvdHMgZGUgbGlnbmVzIFx1MDBFMCB0cmFpdGVyXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0xhcmdlRG9jdW1lbnQoXHJcbiAgICB0ZXh0OiBzdHJpbmcsIFxyXG4gICAgYmxvY2tzOiBzdHJpbmdbXSwgXHJcbiAgICBydWxlczogQ29tcGlsZWRSdWxlcyxcclxuICAgIGNhbGxiYWNrOiAocmVzdWx0OiBzdHJpbmcpID0+IHZvaWQsXHJcbiAgICBiYXRjaFNpemU6IG51bWJlciA9IDUwMFxyXG4pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IGxpbmVzID0gdGV4dC5zcGxpdCgnXFxuJyk7XHJcbiAgICBjb25zdCBwcm9jZXNzZWRMaW5lczogc3RyaW5nW10gPSBbXTtcclxuICAgIFxyXG4gICAgLy8gVHJhaXRlciBwYXIgbG90cyBwb3VyIFx1MDBFOXZpdGVyIGRlIGJsb3F1ZXIgbCdpbnRlcmZhY2VcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5jZWlsKGxpbmVzLmxlbmd0aCAvIGJhdGNoU2l6ZSk7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0SWR4ID0gaSAqIGJhdGNoU2l6ZTtcclxuICAgICAgICBjb25zdCBlbmRJZHggPSBNYXRoLm1pbigoaSArIDEpICogYmF0Y2hTaXplLCBsaW5lcy5sZW5ndGgpO1xyXG4gICAgICAgIGNvbnN0IGJhdGNoTGluZXMgPSBsaW5lcy5zbGljZShzdGFydElkeCwgZW5kSWR4KTtcclxuICAgICAgICBjb25zdCBiYXRjaEJsb2NrcyA9IGJsb2Nrcy5zbGljZShzdGFydElkeCwgZW5kSWR4KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBUcmFpdGVyIGNlIGxvdCBkZSBsaWduZXNcclxuICAgICAgICBjb25zdCBiYXRjaFRleHQgPSBiYXRjaExpbmVzLmpvaW4oJ1xcbicpO1xyXG4gICAgICAgIGNvbnN0IHByb2Nlc3NlZEJhdGNoID0gcHJvY2Vzc1RleHRXaXRoQmxvY2tzKGJhdGNoVGV4dCwgYmF0Y2hCbG9ja3MsIHJ1bGVzKTtcclxuICAgICAgICBwcm9jZXNzZWRMaW5lcy5wdXNoKC4uLnByb2Nlc3NlZEJhdGNoLnNwbGl0KCdcXG4nKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTGFpc3NlciByZXNwaXJlciBsJ2ludGVyZmFjZSB1dGlsaXNhdGV1clxyXG4gICAgICAgIGlmIChpIDwgTWF0aC5jZWlsKGxpbmVzLmxlbmd0aCAvIGJhdGNoU2l6ZSkgLSAxKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAwKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBBcHBlbGVyIGxlIGNhbGxiYWNrIGF2ZWMgbGUgclx1MDBFOXN1bHRhdFxyXG4gICAgY2FsbGJhY2socHJvY2Vzc2VkTGluZXMuam9pbignXFxuJykpO1xyXG59IiwgIi8vIE1vZHVsZSBkZSB0cmFpdGVtZW50IHBhciBsb3QgbWlzIFx1MDBFMCBqb3VyXHJcblxyXG5pbXBvcnQgeyBFZGl0b3IgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgTWljcm90eXBvZ3JhcGhpZVNldHRpbmdzIH0gZnJvbSAnLi4vc2V0dGluZ3Mvc2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBjb21waWxlUnVsZXMgfSBmcm9tICcuLi9jb3JlL3R5cG9ncmFwaHlSdWxlcyc7XHJcbmltcG9ydCB7IGFuYWx5emVEb2N1bWVudFN0cnVjdHVyZSB9IGZyb20gJy4uL2NvcmUvYmxvY2tBbmFseXplcic7XHJcbmltcG9ydCB7IHByb2Nlc3NUZXh0V2l0aEJsb2NrcywgcHJvY2Vzc0xhcmdlRG9jdW1lbnQgfSBmcm9tICcuLi9jb3JlL3RleHRQcm9jZXNzb3InO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJhdGNoVHlwb2dyYXBoeU1vZHVsZSB7XHJcbiAgICBwcml2YXRlIHNldHRpbmdzOiBNaWNyb3R5cG9ncmFwaGllU2V0dGluZ3M7XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3M6IE1pY3JvdHlwb2dyYXBoaWVTZXR0aW5ncykge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpc2UgbGUgbW9kdWxlIGF2ZWMgbGVzIHBhcmFtXHUwMEU4dHJlcyBhY3R1ZWxzXHJcbiAgICAgKiBAcGFyYW0gc2V0dGluZ3MgUGFyYW1cdTAwRTh0cmVzIG1pcyBcdTAwRTAgam91clxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdXBkYXRlU2V0dGluZ3Moc2V0dGluZ3M6IE1pY3JvdHlwb2dyYXBoaWVTZXR0aW5ncykge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGxpcXVlIHRvdXRlcyBsZXMgclx1MDBFOGdsZXMgdHlwb2dyYXBoaXF1ZXMgc3VyIHVuIHRleHRlIHNcdTAwRTlsZWN0aW9ublx1MDBFOVxyXG4gICAgICogQHBhcmFtIGVkaXRvciBcdTAwQzlkaXRldXIgT2JzaWRpYW5cclxuICAgICAqIEByZXR1cm5zIHRydWUgc2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IFx1MDBFOXRcdTAwRTkgYXBwbGlxdVx1MDBFOWVzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhcHBseVR5cG9ncmFwaGljUnVsZXMoZWRpdG9yOiBFZGl0b3IpOiBib29sZWFuIHtcclxuICAgICAgICAvLyBWXHUwMEU5cmlmaWVyIHMnaWwgeSBhIHVuZSBzXHUwMEU5bGVjdGlvblxyXG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBTaSBhdWN1bmUgc1x1MDBFOWxlY3Rpb24sIG5lIHJpZW4gZmFpcmVcclxuICAgICAgICBpZiAoIXNlbGVjdGlvbiB8fCBzZWxlY3Rpb24ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ29uc2VydmVyIGxlcyBwb3NpdGlvbnMgZGUgc1x1MDBFOWxlY3Rpb25cclxuICAgICAgICBjb25zdCBzZWxlY3Rpb25TdGFydCA9IGVkaXRvci5nZXRDdXJzb3IoJ2Zyb20nKTtcclxuICAgICAgICBjb25zdCBzZWxlY3Rpb25FbmQgPSBlZGl0b3IuZ2V0Q3Vyc29yKCd0bycpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFByXHUwMEU5Y29tcGlsZXIgbGVzIHJcdTAwRThnbGVzIHR5cG9ncmFwaGlxdWVzIGF2ZWMgbGVzIHBhcmFtXHUwMEU4dHJlcyBjb3VyYW50c1xyXG4gICAgICAgIGNvbnN0IHJ1bGVzID0gY29tcGlsZVJ1bGVzKHRoaXMuc2V0dGluZ3MpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEFuYWx5c2VyIGxhIHN0cnVjdHVyZSBkdSBkb2N1bWVudCBwb3VyIGRcdTAwRTl0ZWN0ZXIgbGVzIGJsb2NzIHNwXHUwMEU5Y2lhdXhcclxuICAgICAgICBjb25zdCBibG9ja3MgPSBhbmFseXplRG9jdW1lbnRTdHJ1Y3R1cmUoXHJcbiAgICAgICAgICAgIGVkaXRvci5nZXRWYWx1ZSgpLFxyXG4gICAgICAgICAgICBzZWxlY3Rpb25TdGFydC5saW5lLFxyXG4gICAgICAgICAgICBzZWxlY3Rpb25FbmQubGluZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gVHJhaXRlciBsZSB0ZXh0ZSBhdmVjIGxlcyByXHUwMEU4Z2xlcyBjb21waWxcdTAwRTllc1xyXG4gICAgICAgIGNvbnN0IHByb2Nlc3NlZFRleHQgPSBwcm9jZXNzVGV4dFdpdGhCbG9ja3Moc2VsZWN0aW9uLCBibG9ja3MubGluZVR5cGVzLCBydWxlcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gVlx1MDBFOXJpZmllciBzaSBsZSB0ZXh0ZSBhIGNoYW5nXHUwMEU5XHJcbiAgICAgICAgaWYgKHByb2Nlc3NlZFRleHQgPT09IHNlbGVjdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFJlbXBsYWNlciB1bmlxdWVtZW50IGxlIHRleHRlIHNcdTAwRTlsZWN0aW9ublx1MDBFOVxyXG4gICAgICAgIGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKHByb2Nlc3NlZFRleHQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFJlc3RhdXJlciBsYSBzXHUwMEU5bGVjdGlvblxyXG4gICAgICAgIGVkaXRvci5zZXRTZWxlY3Rpb24oc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFpdGUgZGUgZ3JhbmRzIGRvY3VtZW50cyBkZSBtYW5pXHUwMEU4cmUgYXN5bmNocm9uZVxyXG4gICAgICogQHBhcmFtIGVkaXRvciBcdTAwQzlkaXRldXIgT2JzaWRpYW5cclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBGb25jdGlvbiBhcHBlbFx1MDBFOWUgbG9yc3F1ZSBsZSB0cmFpdGVtZW50IGVzdCB0ZXJtaW5cdTAwRTlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFzeW5jIHByb2Nlc3NMYXJnZVNlbGVjdGlvbihlZGl0b3I6IEVkaXRvciwgY2FsbGJhY2s/OiAoKSA9PiB2b2lkKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghc2VsZWN0aW9uIHx8IHNlbGVjdGlvbi5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHNlbGVjdGlvblN0YXJ0ID0gZWRpdG9yLmdldEN1cnNvcignZnJvbScpO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbkVuZCA9IGVkaXRvci5nZXRDdXJzb3IoJ3RvJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gU2kgbGEgc1x1MDBFOWxlY3Rpb24gZXN0IHBldGl0ZSwgdXRpbGlzZXIgbGEgbVx1MDBFOXRob2RlIHN5bmNocm9uZVxyXG4gICAgICAgIGlmIChzZWxlY3Rpb24ubGVuZ3RoIDwgMTAwMDApIHtcclxuICAgICAgICAgICAgdGhpcy5hcHBseVR5cG9ncmFwaGljUnVsZXMoZWRpdG9yKTtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFBvdXIgbGVzIGdyYW5kZXMgc1x1MDBFOWxlY3Rpb25zLCB1dGlsaXNlciBsZSB0cmFpdGVtZW50IGFzeW5jaHJvbmVcclxuICAgICAgICBjb25zdCBydWxlcyA9IGNvbXBpbGVSdWxlcyh0aGlzLnNldHRpbmdzKTtcclxuICAgICAgICBjb25zdCBibG9ja3MgPSBhbmFseXplRG9jdW1lbnRTdHJ1Y3R1cmUoXHJcbiAgICAgICAgICAgIGVkaXRvci5nZXRWYWx1ZSgpLFxyXG4gICAgICAgICAgICBzZWxlY3Rpb25TdGFydC5saW5lLFxyXG4gICAgICAgICAgICBzZWxlY3Rpb25FbmQubGluZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYXdhaXQgcHJvY2Vzc0xhcmdlRG9jdW1lbnQoXHJcbiAgICAgICAgICAgIHNlbGVjdGlvbiwgXHJcbiAgICAgICAgICAgIGJsb2Nrcy5saW5lVHlwZXMsIFxyXG4gICAgICAgICAgICBydWxlcywgXHJcbiAgICAgICAgICAgIChwcm9jZXNzZWRUZXh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihwcm9jZXNzZWRUZXh0KTtcclxuICAgICAgICAgICAgICAgIGVkaXRvci5zZXRTZWxlY3Rpb24oc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59Il0sCiAg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QUFpQixLQUFLLFNBQVMsZ0JBQWdCO0FBQzFFLDRCQUF3QixLQUFLLG1CQUFtQixLQUFLLFNBQVMsZ0JBQWdCO0FBQzlFLFNBQUssbUJBQW1CO0FBQUEsRUFDNUI7QUFBQTtBQUFBLEVBR0Esa0JBQWtCO0FBQ2QsU0FBSyxTQUFTLG1CQUFtQixDQUFDLEtBQUssU0FBUztBQUNoRCxTQUFLLGFBQWE7QUFBQSxFQUN0QjtBQUFBO0FBQUEsRUFHQSxxQkFBcUI7QUFDakIsU0FBSyxJQUFJLFVBQVUsaUJBQWlCLENBQUMsU0FBUztBQUMxQyxVQUFJLEtBQUssZ0JBQWdCLGlDQUFnQixLQUFLLEtBQUssUUFBUTtBQUN2RCxjQUFNLGFBQWMsS0FBSyxLQUFLLE9BQWU7QUFFN0MsWUFBSSxZQUFZO0FBQ1oscUJBQVcsU0FBUztBQUFBLFlBQ2hCLFNBQVM7QUFBQSxjQUNMLE1BQU07QUFBQSxjQUNOLElBQUksV0FBVyxNQUFNLElBQUk7QUFBQSxjQUN6QixRQUFRLFdBQVcsTUFBTSxJQUFJLFNBQVM7QUFBQSxZQUMxQztBQUFBLFVBQ0osQ0FBQztBQUFBLFFBQ0w7QUFBQSxNQUNKO0FBQUEsSUFDSixDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRUEsV0FBVztBQUVQLDRCQUF3QixLQUFLLGlCQUFpQjtBQUFBLEVBQ2xEO0FBQ0o7IiwKICAibmFtZXMiOiBbImltcG9ydF9vYnNpZGlhbiIsICJpc0luU3BlY2lhbEJsb2NrIiwgImltcG9ydF9vYnNpZGlhbiJdCn0K
